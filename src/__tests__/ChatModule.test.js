import MockAdapter from "axios-mock-adapter";
import 'jest-environment-jsdom-global';
import axios from "axios";
import React from 'react';
import {configure, shallow, mount} from "enzyme";
import ChatModule from '../components/ChatModule';
import Adapter from "enzyme-adapter-react-16";
import animateScroll from 'react-scroll/modules/mixins/animate-scroll';
import {get_user_from_token} from "../api/auth";
import {get_room, put_user_into_room} from "../api/rooms";
import WebSocket from 'jest-websocket-mock';

configure({ adapter: new Adapter() });

describe('ChatModule component', () => {

    let mock;
    let server;

    beforeEach(() => {
        mock = new MockAdapter(axios);
        // –ù–∞—Å—Ç—Ä–æ–∏–º WebSocket mock
        server = new WebSocket('ws://localhost');
    });

    afterEach(() => {
        mock.reset();
        server.close();
    });

    it('should handle onClickHandler correctly', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        const mockWebSocket = { readyState: WebSocket.OPEN, send: jest.fn() };
        global.WebSocket = jest.fn().mockImplementation(() => mockWebSocket);

        jest.spyOn(instance, 'setState');

        wrapper.setState({
            message_draft: 'Test message',
            currentUser: 'TestUser',
            room_name: 'TestRoom',
            isButtonDisabled: false
        });

        const fakeEvent = { preventDefault: jest.fn() };

        instance.onClickHandler(fakeEvent);

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        await new Promise(resolve => setImmediate(resolve));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–ª—Å—è –ª–∏ preventDefault
        expect(fakeEvent.preventDefault).toHaveBeenCalled();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è setState —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        expect(instance.setState).toHaveBeenCalledWith(
            {
                message_draft: '',
                isButtonDisabled: true,
                selectedMediaFile: null,
            },
            expect.any(Function)
        );
    });

    it('should call handleMediaFile when media file is selected', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        wrapper.setState({
            message_draft: 'Test message',
            currentUser: 'TestUser',
            room_name: 'TestRoom',
            isButtonDisabled: false,
            selectedMediaFile: "testFile"
        });

        const fakeEvent = { preventDefault: jest.fn() };

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ handleMediaFile
        const handleMediaFileStub = jest.fn();
        instance.handleMediaFile = handleMediaFileStub;

        instance.onClickHandler(fakeEvent);

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        await new Promise(resolve => setImmediate(resolve));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handleMediaFile
        expect(handleMediaFileStub).toHaveBeenCalled();
    });

    it('should send message via WebSocket when client is not null and readyState is OPEN', () => {
        const mockSend = jest.fn();
        const mockWebSocket = {
            send: mockSend,
            readyState: 1
        };

        const wrapper = shallow(<ChatModule />);
        wrapper.setState({
            currentUser: 'testUser',
            room_name: 'testRoom',
            client: mockWebSocket
        });

        wrapper.instance().sendMessageToChat('test message');

        expect(mockSend).toHaveBeenCalled();
    });

    it('should create a new WebSocket connection if client.readyState is WebSocket.CLOSED', async () => {
        const mockWebSocket = {
            readyState: 2
        };

        // –°–æ–∑–¥–∞–µ–º mock –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ WebSocket
        const WebSocketMock = jest.fn(() => mockWebSocket);

        // –°–æ–∑–¥–∞–µ–º mock –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const wrapper = shallow(<ChatModule />);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        wrapper.setState({
            room_name: 'testRoom',
            currentUser: 'testUser',
            client: mockWebSocket // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º client –≤ WebSocket —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º CLOSED
        });

        // –ó–∞–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä WebSocket –Ω–∞ –º–æ–∫
        global.WebSocket = WebSocketMock;

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkWebSocketConnection
        wrapper.instance().checkWebSocketConnection();

        await new Promise(resolve => setImmediate(resolve));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π WebSocket —Å –æ–∂–∏–¥–∞–µ–º—ã–º URL
        expect(WebSocketMock).toHaveBeenCalledWith(
            'ws://localhost:8000/ws/testRoom/testUser'
        );

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π WebSocket –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        global.WebSocket.mockRestore();
    });

    it('renders without crashing', () => {
        const wrapper = shallow(<ChatModule />);
        expect(wrapper.exists()).toBe(true);
    });


    it('renders loading message when data is not loaded', () => {
        const wrapper = shallow(<ChatModule />);
        expect(wrapper.text()).toContain('Loading...');
    });

    it('renders chat after successful data loading', async () => {
        const wrapper = shallow(<ChatModule />);


        await wrapper.setState({ isLoaded: true });
        expect(wrapper.text()).not.toContain('Loading...');
    });

    it('updates state correctly', () => {
        const wrapper = shallow(<ChatModule />);

        const mockEvent = {
            target: { value: 'Test message' },
        };

        wrapper.instance().onInputChange(mockEvent);

        expect(wrapper.state().message_draft).toEqual('Test message');
        expect(wrapper.state().isButtonDisabled).toBe(false); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ Test message –Ω–µ –ø—É—Å—Ç
    });

    it('disables button when message is empty', () => {
        const wrapper = shallow(<ChatModule />);

        const mockEvent = {
            target: { value: '' },
        };

        wrapper.instance().onInputChange(mockEvent);

        expect(wrapper.state().message_draft).toEqual('');
        expect(wrapper.state().isButtonDisabled).toBe(true);
    });

    it('limits message length to 4096 characters', () => {
        const wrapper = shallow(<ChatModule />);

        const longMessageEvent = {
            target: { value: 'A'.repeat(5000) },
        };

        wrapper.instance().onInputChange(longMessageEvent);

        expect(wrapper.state().isButtonDisabled).toBe(true);
    });

    it('should open video chat and sends waiting message', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        const mockSendMessageToChat = jest.fn();
        instance.sendMessageToChat = mockSendMessageToChat;

        instance.onOpenVideoChat();

        expect(mockSendMessageToChat).toHaveBeenCalledWith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å!");

        expect(instance.state.openVideoChat).toBe(true);
    });

    it('mocks animateScroll.scrollToBottom', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        const mockScrollToBottom = jest.spyOn(animateScroll, 'scrollToBottom');

        instance.scrollToBottom();

        expect(mockScrollToBottom).toHaveBeenCalledWith({
            containerId: 'message-list',
            duration: '1ms',
        });
    });

    it('toggles openEmoji state', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        expect(instance.state.openEmoji).toBe(false);

        // –í—ã–∑—ã–≤–∞–µ–º onOpenEmoji
        instance.onOpenEmoji();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ openEmoji
        expect(instance.state.openEmoji).toBe(true);

        // –í—ã–∑—ã–≤–∞–µ–º onOpenEmoji —Å–Ω–æ–≤–∞
        instance.onOpenEmoji();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ openEmoji –∏–∑–º–µ–Ω–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ
        expect(instance.state.openEmoji).toBe(false);
    });

    it('adds selected emoji to message_draft and updates state', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        expect(instance.state.message_draft).toBe('');
        expect(instance.state.isButtonDisabled).toBe(true);

        const mockEmojiData = { emoji: 'üòä' };
        instance.onEmojiSelection('mockCode', mockEmojiData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ message_draft
        expect(instance.state.message_draft).toBe('üòä');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ isButtonDisabled
        expect(instance.state.isButtonDisabled).toBe(false);
    });

    it('should disable button when emoji with long message is selected', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        expect(instance.state.message_draft).toBe('');
        expect(instance.state.isButtonDisabled).toBe(true);

        const mockEmojiData = { emoji: 'üòä'.repeat(5000) };
        instance.onEmojiSelection('mockCode', mockEmojiData);

        expect(instance.state.isButtonDisabled).toBe(true);
    });

    it('calls onAttachFile correctly', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        jest.spyOn(instance, 'checkImageSize').mockImplementation(() => Promise.resolve());
        jest.spyOn(instance, 'isVideoFormatAllowed').mockImplementation(() => Promise.resolve(true));

        const mockFile = new File([''], 'mockFile.jpg', { type: 'image/jpeg' });

        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn(),
        });

        // –í—ã–∑—ã–≤–∞–µ–º onAttachFile
        instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç input —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        expect(createElementSpy).toHaveBeenCalledWith('input');

        jest.restoreAllMocks();
    });

    it('calls showError for invalid file type', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π —Ñ–∞–π–ª —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ç–∏–ø–æ–º
        const mockFile = new File([''], 'mockFile.txt', { type: 'text/plain' });

        // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ showError
        jest.spyOn(instance, 'showError').mockImplementation();

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const fileInput = {
            type: 'file',
            accept: '.jpg,.png,.jpeg,.webp,.gif,.mp4,.avi,.webm,.mp3,.wav',
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
                    callback({ target: { files: [mockFile] } });
                }
            }),
            click: jest.fn(),
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        jest.spyOn(document, 'createElement').mockReturnValue(fileInput);

        // –í—ã–∑—ã–≤–∞–µ–º onAttachFile
        instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ showError —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        expect(instance.showError).toHaveBeenCalledWith('–ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        jest.restoreAllMocks();
    });

    it('calls showError for oversized audio file', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ showError
        jest.spyOn(instance, 'showError').mockImplementation();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
                    const mockAudioFile = new File([''], 'mockAudioFile.mp3', { type: 'audio/mp3' });
                    Object.defineProperty(mockAudioFile, 'size', { value: 10 * 1024 * 1024 });
                    callback({ target: { files: [mockAudioFile] } });
                }
            }),
        });

        // –í—ã–∑—ã–≤–∞–µ–º onAttachFile
        instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ showError —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        expect(instance.showError).toHaveBeenCalledWith('–†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä (8 MB).');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('calls showError for oversized video file', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ showError
        jest.spyOn(instance, 'showError').mockImplementation();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–º
                    const mockVideoFile = new File([''], 'mockVideoFile.mp4', { type: 'video/mp4' });
                    Object.defineProperty(mockVideoFile, 'size', { value: 51 * 1024 * 1024 });
                    callback({ target: { files: [mockVideoFile] } });
                }
            }),
        });

        // –í—ã–∑—ã–≤–∞–µ–º onAttachFile
        instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ showError —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        expect(instance.showError).toHaveBeenCalledWith('–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä (50 MB).');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('calls showError for oversized image file', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ showError
        jest.spyOn(instance, 'showError').mockImplementation();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    const mockImageFile = new File([''], 'mockImageFile.jpeg', { type: 'image/jpeg' });
                    Object.defineProperty(mockImageFile, 'size', { value: 11 * 1024 * 1024 });
                    callback({ target: { files: [mockImageFile] } });
                }
            }),
        });

        // –í—ã–∑—ã–≤–∞–µ–º onAttachFile
        instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ showError —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        expect(instance.showError).toHaveBeenCalledWith('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä (10 MB).');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('calls checkImageSize for image file within limits', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ checkImageSize
        jest.spyOn(instance, 'checkImageSize').mockImplementation(() => Promise.resolve());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    const mockImageFile = new File([''], 'mockImageFile.jpeg', { type: 'image/jpeg' });
                    Object.defineProperty(mockImageFile, 'size', { value: 5 * 1024 * 1024 }); // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤
                    callback({ target: { files: [mockImageFile] } });
                }
            }),
        });

        // –í—ã–∑—ã–≤–∞–µ–º onAttachFile
        await instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ checkImageSize —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        expect(instance.checkImageSize).toHaveBeenCalledWith(expect.any(File));

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('calls isVideoFormatAllowed for video file', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        jest.spyOn(instance, 'isVideoFormatAllowed').mockImplementation(() => Promise.resolve(true));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // Simulate change event with the mock video file
                    const mockVideoFile = new File([''], 'mockVideoFile.mp4', { type: 'video/mp4' });
                    Object.defineProperty(mockVideoFile, 'size', { value: 20 * 1024 * 1024 }); // Within limits
                    callback({ target: { files: [mockVideoFile] } });
                }
            }),
        });

        await instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ checkImageSize —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        expect(instance.isVideoFormatAllowed).toHaveBeenCalledWith(expect.any(File));

        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('shows error for disallowed video format', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ isVideoFormatAllowed –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è false
        jest.spyOn(instance, 'isVideoFormatAllowed').mockImplementation(() => Promise.resolve(false));

        jest.spyOn(instance, 'showError').mockImplementation();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–º
                    const mockVideoFile = new File([''], 'mockVideoFile.mp4', { type: 'video/mp4' });
                    Object.defineProperty(mockVideoFile, 'size', { value: 20 * 1024 * 1024 }); // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤
                    callback({ target: { files: [mockVideoFile] } });
                }
            }),
        });

        await instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ showError —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        expect(instance.showError).toHaveBeenCalledWith('–î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');

        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('sets state for allowed video format', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ isVideoFormatAllowed –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è true
        jest.spyOn(instance, 'isVideoFormatAllowed').mockImplementation(() => Promise.resolve(true));

        jest.spyOn(instance, 'setState').mockImplementation();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—à–ø–∏–æ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –º–æ–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç input
        const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
            click: jest.fn(),
            addEventListener: jest.fn((eventName, callback) => {
                if (eventName === 'change') {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change —Å –º–æ–∫–æ–≤—ã–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–º
                    const mockVideoFile = new File([''], 'mockVideoFile.mp4', { type: 'video/mp4' });
                    Object.defineProperty(mockVideoFile, 'size', { value: 20 * 1024 * 1024 }); // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤
                    callback({ target: { files: [mockVideoFile] } });
                }
            }),
        });

        await instance.onAttachFile();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ setState —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        expect(instance.setState).toHaveBeenCalledWith({ selectedMediaFile: expect.any(File), isButtonDisabled: false });

        createElementSpy.mockRestore();
        jest.restoreAllMocks();
    });

    it('checks if video format is allowed', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ video
        const videoMock = {
            src: '',
            videoWidth: 1920,
            videoHeight: 1080,
            onloadedmetadata: null,
        };

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement
        global.document.createElement = jest.fn().mockReturnValue(videoMock);

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ URL.createObjectURL
        global.URL.createObjectURL = jest.fn().mockReturnValue('mockBlobURL');

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        const mockVideoFile = new File([''], 'mockVideoFile.mp4', { type: 'video/mp4' });

        // –í—ã–∑—ã–≤–∞–µ–º isVideoFormatAllowed
        const isAllowedPromise = instance.isVideoFormatAllowed(mockVideoFile);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ loadedmetadata
        videoMock.onloadedmetadata();

        // –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è isAllowedPromise
        const isAllowed = await isAllowedPromise;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ video –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        expect(videoMock.src).toBe('mockBlobURL');
        expect(global.URL.createObjectURL).toHaveBeenCalledWith(mockVideoFile);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–æ—Ä–º–∞—Ç
        expect(isAllowed).toBe(true);
    });

    it('returns false for disallowed video format', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ video
        const videoMock = {
            src: '',
            videoWidth: 500,
            videoHeight: 300,
            onloadedmetadata: null,
        };

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ document.createElement
        global.document.createElement = jest.fn().mockReturnValue(videoMock);

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ URL.createObjectURL
        global.URL.createObjectURL = jest.fn().mockReturnValue('mockBlobURL');

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        const mockVideoFile = new File([''], 'mockVideoFile.mp4', { type: 'video/mp4' });

        // –í—ã–∑—ã–≤–∞–µ–º isVideoFormatAllowed
        const isAllowedPromise = instance.isVideoFormatAllowed(mockVideoFile);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ loadedmetadata
        videoMock.onloadedmetadata();

        // –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è isAllowedPromise
        const isAllowed = await isAllowedPromise;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ video –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        expect(videoMock.src).toBe('mockBlobURL');
        expect(global.URL.createObjectURL).toHaveBeenCalledWith(mockVideoFile);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–æ—Ä–º–∞—Ç
        expect(isAllowed).toBe(false);
    });

    it('handles state changes correctly', () => {
        const wrapper = shallow(<ChatModule />);

        wrapper.setState({ isLoaded: true });

        expect(wrapper.find('#message-list')).toHaveLength(1);
    });

    it('renders loading state', () => {
        const wrapper = shallow(<ChatModule />);
        expect(wrapper.exists()).toBe(true);
        expect(wrapper.find('h1').text()).toBe('Loading...');
    });

    it('renders messages with media files correctly', () => {
        const messages = [
            { user: { username: 'User1' }, message: 'Hello!', media_file_url: 'mockImageFile.jpeg' },
            { user: { username: 'User2' }, message: 'Hi!', media_file_url: 'mockVideoFile.mp4' },
            { user: { username: 'User1' }, message: 'How are you?', media_file_url: 'mockAudioFile.mp3' },
        ];

        const wrapper = shallow(<ChatModule />);
        wrapper.setState({ isLoaded: true, openVideoChat: false, messages });


        expect(wrapper.find('div').at(0).prop('style')).toHaveProperty('flexDirection', 'row-reverse');
        expect(wrapper.find('video')).toHaveLength(1);
        expect(wrapper.find('audio')).toHaveLength(1);
        expect(wrapper.find('img')).toHaveLength(1);

        expect(wrapper.findWhere(node => node.text().includes('Hello!')).exists()).toBe(true);
        expect(wrapper.findWhere(node => node.text().includes('Hi!')).exists()).toBe(true);
        expect(wrapper.findWhere(node => node.text().includes('How are you?')).exists()).toBe(true);
    });

    it('checks image size and resolves if within limits', async () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        const imgMock = {
            width: 150,
            height: 120,
            onload: null,
            onerror: null,
        };

        const createObjectURLMock = jest.fn().mockReturnValue('mockBlobURL');

        global.URL.createObjectURL = createObjectURLMock;
        global.document.createElement = jest.fn().mockReturnValue(imgMock);

        const mockImageFile = new File([''], 'mockImageFile.jpg', { type: 'image/jpeg' });

        const promise = instance.checkImageSize(mockImageFile);

        imgMock.onload();

        await expect(promise).resolves.toBeUndefined();

        expect(createObjectURLMock).toHaveBeenCalledWith(mockImageFile);
        expect(document.createElement).toHaveBeenCalledWith('img');
    });

    it('should reject with the correct error message if height or weight < 100',  () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        const imgMock = {
            width: 90,
            height: 120,
            onload: null,
            onerror: null,
        };

        const createObjectURLMock = jest.fn().mockReturnValue('mockBlobURL');

        global.URL.createObjectURL = createObjectURLMock;
        global.document.createElement = jest.fn().mockReturnValue(imgMock);

        const mockImageFile = new File([''], 'mockImageFile.jpg', { type: 'image/jpeg' });

        const promise = instance.checkImageSize(mockImageFile);

        imgMock.onload();

        expect(promise).rejects.toEqual("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π.");

    });

    it('should reject with the correct error message if height or weight > 2048',  () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        const imgMock = {
            width: 2049,
            height: 120,
            onload: null,
            onerror: null,
        };

        const createObjectURLMock = jest.fn().mockReturnValue('mockBlobURL');

        global.URL.createObjectURL = createObjectURLMock;
        global.document.createElement = jest.fn().mockReturnValue(imgMock);

        const mockImageFile = new File([''], 'mockImageFile.jpg', { type: 'image/jpeg' });

        const promise = instance.checkImageSize(mockImageFile);

        imgMock.onload();

        expect(promise).rejects.toEqual("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2–∫ –ø–∏–∫—Å–µ–ª–µ–π");

    });

    it('should receive user information on successful API calls', async () => {
        const wrapper = shallow(<ChatModule room_name="exampleRoom" />);
        const instance = wrapper.instance();

        // –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≤—ã–∑–æ–≤—ã API
        mock.onGet(get_user_from_token).reply(200, { username: 'testUser' });
        mock.onPut(put_user_into_room+"/"+'exampleRoom').reply(200);
        mock.onGet(get_room+"/"+'exampleRoom').reply(200, { members: [{username: "firstUser"}], room_name: 'exampleRoom' });

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ componentDidMount
        wrapper.instance().componentDidMount();

        await new Promise(resolve => setImmediate(resolve));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        expect(instance.state.currentUser).toEqual('testUser');
        expect(instance.state.members).toEqual([{username: "firstUser"}]);
        expect(instance.state.room_name).toEqual('exampleRoom');
        expect(instance.state.isLoaded).toEqual(true);

    });

    it('should call onClickHandler on "Enter" key press', () => {
        const wrapper = shallow(<ChatModule />);
        const instance = wrapper.instance();

        jest.spyOn(instance, 'onClickHandler');

        // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å keyCode 13 (–∫–ª–∞–≤–∏—à–∞ Enter)
        const enterKeyEvent = { keyCode: 13, preventDefault: jest.fn() };

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onEnterHandler —Å —Ñ–µ–π–∫–æ–≤—ã–º —Å–æ–±—ã—Ç–∏–µ–º
        instance.onEnterHandler(enterKeyEvent);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω preventDefault
        expect(enterKeyEvent.preventDefault).toHaveBeenCalled();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω onClickHandler
        expect(instance.onClickHandler).toHaveBeenCalledWith(enterKeyEvent);
    });
});