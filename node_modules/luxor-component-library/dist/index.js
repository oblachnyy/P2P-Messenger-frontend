function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('@emotion/styled'));
var axios = _interopDefault(require('axios'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var index = memoize(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var spacing = {
  none: 0,
  xxsmall: '4px',
  xsmall: '8px',
  small: '12px',
  medium: '20px',
  gutter: '24px',
  large: '32px',
  xlarge: '48px',
  xxlarge: '96px',
  xxxlarge: '136px'
};
var fontSizes = {
  xsmall: '0.889rem',
  small: '1rem',
  medium: '1.125rem',
  large: '1.155rem',
  xlarge: '1.56rem',
  xxlarge: '1.69rem',
  header: '4rem',
  sub_header: '3rem'
};

var white = '#fcfcfc';
var black = '#000501';
var palette = {
  common: {
    black: black,
    white: white
  },
  primary: {
    main: '#090C9B',
    light: '#3066BE',
    contrastText: white
  },
  secondary: {
    main: '#B4C5E4',
    light: '#FBFFF1',
    contrastText: black
  },
  error: {
    main: '#C04ABC',
    light: '#D9BBF9',
    contrastText: white
  },
  grey: {
    100: '#8a878f',
    200: '#635f69',
    300: '#3c3744',
    400: '#302c36'
  }
};
var shadows = {
  0: 'none',
  1: '0px 5px 10px rgba(0, 0, 0, 0.12)',
  2: '0px 8px 30px rgba(0, 0, 0, 0.24)'
};
var typography = {
  primaryFontFamily: "Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, 'Helvetica Neue', sans-serif",
  secondaryFontFamily: 'serif'
};
var shape = {
  borderRadius: spacing.xsmall
};
var theme = {
  palette: palette,
  shadows: shadows,
  typography: typography,
  shape: shape
};

var isObjectEmpty = function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0;
};

var IGNORED_PROPS = ['color'];
var buttonConfig = {
  shouldForwardProp: function shouldForwardProp(prop) {
    return index(prop) && !IGNORED_PROPS.includes(prop);
  }
};
var buttonSizeProps = {
  small: {
    fontSize: fontSizes.xsmall,
    padding: spacing.xsmall + " " + spacing.small
  },
  medium: {
    fontSize: fontSizes.small,
    padding: spacing.small + " " + spacing.medium
  },
  large: {
    fontSize: fontSizes.medium,
    padding: spacing.medium + " " + spacing.large
  }
};

var getPropsByVariant = function getPropsByVariant(_ref) {
  var variant = _ref.variant,
      color = _ref.color,
      theme = _ref.theme;
  var colorInPalette = theme.palette[color];
  var variants = {
    outline: colorInPalette ? outlineVariantPropsByPalette(colorInPalette) : defaultOutlineVariantProps,
    solid: colorInPalette ? solidVariantPropsByPalette(colorInPalette) : defaultSolidVariantProps
  };
  return variants[variant] || variants.solid;
};

var defaultSolidVariantProps = {
  main: {
    border: "1px solid " + theme.palette.grey[100],
    backgroundColor: theme.palette.grey[100],
    color: theme.palette.common.black
  },
  hover: {
    border: "1px solid " + theme.palette.grey[200],
    backgroundColor: theme.palette.grey[200]
  }
};
var defaultOutlineVariantProps = {
  main: {
    border: "1px solid " + theme.palette.common.black,
    backgroundColor: theme.palette.common.white,
    color: theme.palette.common.black
  },
  hover: {
    border: "1px solid " + theme.palette.common.black,
    backgroundColor: theme.palette.common.white,
    color: theme.palette.common.black
  }
};

var solidVariantPropsByPalette = function solidVariantPropsByPalette(colorInPalette) {
  return colorInPalette && {
    main: {
      border: "1px solid " + colorInPalette.main,
      backgroundColor: colorInPalette.main,
      color: colorInPalette.contrastText
    },
    hover: {
      border: "1px solid " + colorInPalette.light,
      backgroundColor: colorInPalette.light
    }
  };
};

var outlineVariantPropsByPalette = function outlineVariantPropsByPalette(colorInPalette) {
  return colorInPalette && {
    main: {
      border: "1px solid " + colorInPalette.main,
      backgroundColor: colorInPalette.contrastText,
      color: colorInPalette.main
    },
    hover: {
      border: "1px solid " + colorInPalette.light,
      backgroundColor: colorInPalette.main,
      color: colorInPalette.contrastText
    }
  };
};

var StyledButton = function StyledButton(_ref2) {
  var _buttonSizeProps$size, _buttonSizeProps$size2;

  var color = _ref2.color,
      size = _ref2.size,
      variant = _ref2.variant,
      enableElevation = _ref2.enableElevation,
      disabled = _ref2.disabled,
      onClick = _ref2.onClick,
      theme$1 = _ref2.theme;

  if (isObjectEmpty(theme$1)) {
    theme$1 = theme;
  }

  var fontSizeBySize = (_buttonSizeProps$size = buttonSizeProps[size]) === null || _buttonSizeProps$size === void 0 ? void 0 : _buttonSizeProps$size.fontSize;
  var paddingBySize = (_buttonSizeProps$size2 = buttonSizeProps[size]) === null || _buttonSizeProps$size2 === void 0 ? void 0 : _buttonSizeProps$size2.padding;
  var propsByVariant = getPropsByVariant({
    variant: variant,
    theme: theme$1,
    color: color
  });
  return _extends({
    onClick: onClick,
    fontWeight: 500,
    cursor: 'pointer',
    outline: 'none',
    opacity: disabled && 0.7,
    transition: 'all 0.2s linear',
    padding: buttonSizeProps.medium.padding,
    fontSize: buttonSizeProps.medium.fontSize,
    borderRadius: theme$1.shape.borderRadius,
    fontFamily: theme$1.typography.fontFamily,
    boxShadow: enableElevation && theme$1.shadows[1]
  }, propsByVariant && propsByVariant.main, paddingBySize && {
    padding: paddingBySize
  }, fontSizeBySize && {
    fontSize: fontSizeBySize
  }, {
    '&:hover': !disabled && _extends({
      boxShadow: enableElevation && theme$1.shadows[2]
    }, propsByVariant && propsByVariant.hover)
  });
};

var Button = styled('button', buttonConfig)(StyledButton);

var Button$1 = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Button$1, _Component);

  function Button$1() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Button$1.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement(Button, _extends({
      variant: this.props.variant,
      color: this.props.color,
      size: this.props.size
    }, this.props), this.props.text);
  };

  return Button$1;
}(React.Component);

var IGNORED_PROPS$1 = [];
var inputConfig = {
  shouldForwardProp: function shouldForwardProp(prop) {
    return index(prop) && !IGNORED_PROPS$1.includes(prop);
  }
};
var inputSizeProps = {
  small: {
    fontSize: fontSizes.xsmall,
    padding: spacing.xsmall + " " + spacing.medium
  },
  medium: {
    fontSize: fontSizes.small,
    padding: spacing.small + " " + spacing.medium
  },
  large: {
    fontSize: fontSizes.medium,
    padding: spacing.medium + " " + spacing.large
  }
};

var getPropsByVariant$1 = function getPropsByVariant(_ref) {
  var variant = _ref.variant,
      color = _ref.color,
      theme = _ref.theme;
  var colorInPalette = theme.palette[color];
  var variants = {
    outline: colorInPalette ? outlineVariantPropsByPalette$1(colorInPalette) : defaultOutlineVariantProps$1,
    solid: colorInPalette ? solidVariantPropsByPalette$1(colorInPalette) : defaultSolidVariantProps$1
  };
  return variants[variant] || variants.solid;
};

var defaultSolidVariantProps$1 = {
  main: {
    background: theme.palette.common.white,
    color: theme.palette.common.black
  },
  focus: {
    color: theme.palette.common.white,
    background: theme.palette.grey[100]
  },
  placeholder: {
    color: theme.palette.common.black
  }
};
var defaultOutlineVariantProps$1 = {
  main: {
    background: theme.palette.common.black,
    color: theme.palette.secondary.light
  },
  focus: {
    background: theme.palette.secondary.light,
    color: theme.palette.common.black
  },
  placeholder: {
    color: theme.palette.secondary.light
  }
};

var solidVariantPropsByPalette$1 = function solidVariantPropsByPalette(colorInPalette) {
  return colorInPalette && {
    main: {
      background: colorInPalette.light,
      color: colorInPalette.contrastText
    },
    focus: {
      background: colorInPalette.main
    },
    placeholder: {
      color: colorInPalette.contrastText
    }
  };
};

var outlineVariantPropsByPalette$1 = function outlineVariantPropsByPalette(colorInPalette) {
  return colorInPalette && {
    main: {
      background: colorInPalette.contrastText,
      color: colorInPalette.main
    },
    focus: {
      background: colorInPalette.main,
      color: colorInPalette.contrastText
    },
    placeholder: {
      color: colorInPalette.main
    }
  };
};

var StyledInput = function StyledInput(_ref2) {
  var _inputSizeProps$size, _inputSizeProps$size2;

  var placeholder = _ref2.placeholder,
      color = _ref2.color,
      variant = _ref2.variant,
      disabled = _ref2.disabled,
      enableElevation = _ref2.enableElevation,
      onClick = _ref2.onClick,
      onChange = _ref2.onChange,
      value = _ref2.value,
      theme$1 = _ref2.theme,
      size = _ref2.size,
      width = _ref2.width,
      roundedCorners = _ref2.roundedCorners,
      props = _objectWithoutPropertiesLoose(_ref2, ["placeholder", "color", "variant", "disabled", "enableElevation", "onClick", "onChange", "value", "theme", "size", "width", "roundedCorners"]);

  if (isObjectEmpty(theme$1)) {
    theme$1 = theme;
  }

  var fontSizeBySize = (_inputSizeProps$size = inputSizeProps[size]) === null || _inputSizeProps$size === void 0 ? void 0 : _inputSizeProps$size.size;
  var paddingBySize = (_inputSizeProps$size2 = inputSizeProps[size]) === null || _inputSizeProps$size2 === void 0 ? void 0 : _inputSizeProps$size2.padding;
  var propsByVariant = getPropsByVariant$1({
    variant: variant,
    theme: theme$1,
    color: color
  });
  var borderRadius = theme$1.shape.borderRadius;

  if (roundedCorners != null) {
    borderRadius = roundedCorners;
  }

  if (width == null) {
    width = '400px';
  }

  return _extends({}, props, {
    onClick: onClick,
    onChange: onChange,
    value: value,
    placeholder: placeholder,
    borderRadius: borderRadius,
    width: width,
    outline: 'none',
    border: 'none',
    fontWeight: 500,
    cursor: 'pointer',
    opacity: disabled && 0.7,
    transition: 'all 0.2s linear',
    fontSize: inputSizeProps.medium.fontSize,
    fontFamily: theme$1.typography.primaryFontFamily,
    boxShadow: enableElevation && theme$1.shadows[1]
  }, propsByVariant && propsByVariant.main, paddingBySize && {
    padding: paddingBySize
  }, fontSizeBySize && {
    size: fontSizeBySize
  }, {
    '&:focus': !disabled && _extends({
      boxShadow: enableElevation && theme$1.shadows[2]
    }, propsByVariant && propsByVariant.focus),
    '::placeholder': _extends({}, propsByVariant && propsByVariant.placeholder)
  });
};

var Input = styled('input', inputConfig)(StyledInput);

var Input$1 = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Input$1, _Component);

  function Input$1() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Input$1.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement(Input, _extends({
      paceholder: this.props.placeholder || null,
      color: this.props.color || 'default',
      size: this.props.size || 'medium',
      variant: this.props.variant || 'solid',
      roundedCorners: this.props.roundedCorners || null
    }, this.props));
  };

  return Input$1;
}(React.Component);

var StyledBox = function StyledBox(_ref) {
  var paddingX = _ref.paddingX,
      paddingY = _ref.paddingY,
      marginX = _ref.marginX,
      marginY = _ref.marginY,
      position = _ref.position,
      top = _ref.top,
      bottom = _ref.bottom,
      left = _ref.left,
      right = _ref.right,
      backgroundColor = _ref.backgroundColor,
      backgroundImage = _ref.backgroundImage,
      textAlign = _ref.textAlign,
      width = _ref.width,
      display = _ref.display,
      roundedCorners = _ref.roundedCorners,
      onClick = _ref.onClick,
      opacity = _ref.opacity,
      className = _ref.className,
      border = _ref.border,
      color = _ref.color,
      transform = _ref.transform,
      theme$1 = _ref.theme,
      props = _objectWithoutPropertiesLoose(_ref, ["paddingX", "paddingY", "marginX", "marginY", "position", "top", "bottom", "left", "right", "backgroundColor", "backgroundImage", "textAlign", "width", "display", "roundedCorners", "onClick", "opacity", "className", "border", "color", "transform", "theme"]);

  if (isObjectEmpty(theme$1)) {
    theme$1 = theme;
  }

  var padding = spacing[props.padding];
  var paddingTop = spacing[props.paddingTop];
  var paddingRight = spacing[props.paddingRight];
  var paddingBottom = spacing[props.paddingBottom];
  var paddingLeft = spacing[props.paddingLeft];

  if (paddingX) {
    paddingLeft = spacing[paddingX];
    paddingRight = spacing[paddingX];
  }

  if (paddingY) {
    paddingTop = spacing[paddingY];
    paddingBottom = spacing[paddingY];
  }

  var margin = spacing[props.margin];
  var marginTop = spacing[props.marginTop];
  var marginRight = spacing[props.marginRight];
  var marginBottom = spacing[props.marginBottom];
  var marginLeft = spacing[props.marginLeft];

  if (marginX) {
    marginLeft = spacing[marginX];
    marginRight = spacing[marginX];
  }

  if (marginY) {
    marginTop = spacing[marginY];
    marginBottom = spacing[marginY];
  }

  var borderRadius = spacing.none;

  if (roundedCorners) {
    borderRadius = theme$1.shape.borderRadius;
  }

  return {
    padding: padding,
    paddingTop: paddingTop,
    paddingRight: paddingRight,
    paddingBottom: paddingBottom,
    paddingLeft: paddingLeft,
    position: position,
    top: top,
    bottom: bottom,
    left: left,
    right: right,
    margin: margin,
    marginTop: marginTop,
    marginRight: marginRight,
    marginBottom: marginBottom,
    marginLeft: marginLeft,
    width: width,
    display: display,
    backgroundColor: backgroundColor,
    backgroundImage: backgroundImage,
    onClick: onClick,
    textAlign: textAlign,
    border: border,
    borderRadius: borderRadius,
    className: className,
    color: color,
    transform: transform,
    opacity: opacity,
    fontFamily: theme$1.typography.primaryFontFamily
  };
};

var IGNORED_PROPS$2 = ['display', 'width', 'backgroundColor', 'textAlign', 'backgroundImage', 'opacity', 'className', 'transform', 'color', 'border'];
var boxConfig = {
  shouldForwardProp: function shouldForwardProp(prop) {
    return index(prop) && !IGNORED_PROPS$2.includes(prop);
  }
};
var Box = styled('div', boxConfig)(StyledBox);

var Row = function Row(_ref) {
  var children = _ref.children,
      space = _ref.space,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "space"]);

  return /*#__PURE__*/React__default.createElement(Box, _extends({
    display: "flex"
  }, props), React__default.Children.map(children, function (child, index) {
    if (index > 0) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        marginLeft: space,
        width: '100%'
      });
    }

    return /*#__PURE__*/React__default.cloneElement(child, {
      width: '100%'
    });
  }));
};

var Stack = function Stack(_ref) {
  var children = _ref.children,
      space = _ref.space,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "space"]);

  return /*#__PURE__*/React__default.createElement(Box, props, React__default.Children.map(children, function (child, index) {
    if (index > 0) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        marginTop: space
      });
    }

    return child;
  }));
};

var dotenv = require('dotenv');

dotenv.config();
var config = {
  RAPID_API_KEY: process.env.REACT_APP_RAPIDAPI_KEY
};

var styles = {"container":"_1Rxcj","bgsolid":"_2oF_N","bg":"_b9CGF","cloudy":"_OLkQr","snowy":"_1-wLa","rainy":"_C-HOZ","sunny":"_EMJi1","overlay":"_vljaB"};

var WeatherWidget = /*#__PURE__*/function (_Component) {
  _inheritsLoose(WeatherWidget, _Component);

  function WeatherWidget(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.forceUpdateHandler = _this.forceUpdateHandler.bind(_assertThisInitialized(_this));
    _this.state = {
      weather: {},
      isLoading: false
    };
    return _this;
  }

  var _proto = WeatherWidget.prototype;

  _proto.forceUpdateHandler = function forceUpdateHandler() {
    this.forceUpdate();
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.setState({
      isLoading: true
    });
    var city = this.props.city || 'los angeles,us';
    var options = {
      method: 'GET',
      url: 'https://community-open-weather-map.p.rapidapi.com/weather',
      params: {
        q: city,
        lang: 'English',
        units: 'imperial'
      },
      headers: {
        'access-control-allow-origin': '*',
        'x-rapidapi-key': config.RAPID_API_KEY,
        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'
      }
    };
    axios.request(options).then(function (response) {
      _this2.setState({
        weather: response.data,
        isLoading: false
      });
    })["catch"](function (error) {
      console.error(error);
      setTimeout(function () {
        this.forceUpdateHandler();
      }.bind(_this2), 10000);
    });
  };

  _proto.render = function render() {
    var _this$state = this.state,
        isLoading = _this$state.isLoading,
        weather = _this$state.weather;

    if (isLoading) {
      return /*#__PURE__*/React__default.createElement("h2", null, "Loading ...");
    } else {
      var city, currentTemp, hi, lo, humidity, feelsLike, description, weatherBackgroundClass;

      if (weather && weather.main) {
        city = weather.name || undefined;
        currentTemp = weather.main.temp || undefined;
        hi = weather.main.temp_max || undefined;
        lo = weather.main.temp_min || undefined;
        humidity = weather.main.humidity || undefined;
        feelsLike = weather.main.feels_like || undefined;
      }

      if (weather && weather.weather) {
        var s = weather.weather[0].description || undefined;
        description = s.charAt(0).toUpperCase() + s.slice(1);

        if (this.props.backgroundType === undefined || this.props.backgroundType === 'dynamic') {
          if (description.includes('cloud')) {
            weatherBackgroundClass = styles.cloudy;
          } else if (description.includes('sun')) {
            weatherBackgroundClass = styles.sunny;
          } else if (description.includes('snow')) {
            weatherBackgroundClass = styles.snowy;
          } else if (description.includes('rain')) {
            weatherBackgroundClass = styles.rainy;
          } else {
            weatherBackgroundClass = styles.bg;
          }
        } else {
          weatherBackgroundClass = styles.bgsolid;
        }
      }

      return /*#__PURE__*/React__default.createElement(Box, _extends({
        roundedCorners: true,
        className: styles.container,
        padding: "medium"
      }, this.props), /*#__PURE__*/React__default.createElement("div", {
        className: weatherBackgroundClass
      }), /*#__PURE__*/React__default.createElement(Box, {
        textAlign: "center",
        padding: "none",
        paddingX: "small",
        margin: "xlarge",
        roundedCorners: true,
        color: theme.palette.common.white,
        style: {
          fontWeight: 'bold',
          zIndex: '2'
        },
        className: styles.overlay
      }, /*#__PURE__*/React__default.createElement("h1", null, city), /*#__PURE__*/React__default.createElement("h1", null, currentTemp, "\xB0F"), /*#__PURE__*/React__default.createElement("h1", null, description), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("h2", null, "Feels like: ", feelsLike, "\xB0F"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(Row, {
        space: "small",
        textAlign: "center"
      }, /*#__PURE__*/React__default.createElement(Box, null, /*#__PURE__*/React__default.createElement("h3", null, "High: ", hi, "\xB0F")), /*#__PURE__*/React__default.createElement(Box, null, /*#__PURE__*/React__default.createElement("h3", null, "Low: ", lo, "\xB0F")), /*#__PURE__*/React__default.createElement(Box, null, /*#__PURE__*/React__default.createElement("h3", null, "Humidity: ", humidity, "%")))));
    }
  };

  return WeatherWidget;
}(React.Component);

exports.Box = Box;
exports.Button = Button$1;
exports.Input = Input$1;
exports.Row = Row;
exports.Stack = Stack;
exports.WeatherWidget = WeatherWidget;
exports.defaultTheme = theme;
exports.fontSizes = fontSizes;
exports.spacing = spacing;
//# sourceMappingURL=index.js.map
