[{"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\index.js":"1","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\App.js":"3","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\NavBar.js":"4","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Registration.js":"5","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\Dashboard.js":"6","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ProtectedRoute.js":"7","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Profile.js":"8","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Login.js":"9","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Home.js":"10","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Favorites.js":"11","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Logout.js":"12","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\VideoChatPage.js":"13","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\auth.js":"14","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ChatModule.js":"15","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\rooms.js":"16","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\VideoChatModule.js":"17"},{"size":515,"mtime":1708044757748,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1707921440121,"results":"20","hashOfConfig":"19"},{"size":1376,"mtime":1708044757747,"results":"21","hashOfConfig":"19"},{"size":2558,"mtime":1708041331653,"results":"22","hashOfConfig":"19"},{"size":10564,"mtime":1710696377691,"results":"23","hashOfConfig":"19"},{"size":2147,"mtime":1708038529381,"results":"24","hashOfConfig":"19"},{"size":368,"mtime":1708025387185,"results":"25","hashOfConfig":"19"},{"size":17090,"mtime":1710696377694,"results":"26","hashOfConfig":"19"},{"size":7120,"mtime":1709740400723,"results":"27","hashOfConfig":"19"},{"size":18740,"mtime":1710174005863,"results":"28","hashOfConfig":"19"},{"size":17497,"mtime":1710696377693,"results":"29","hashOfConfig":"19"},{"size":691,"mtime":1708025387188,"results":"30","hashOfConfig":"19"},{"size":2247,"mtime":1710696377692,"results":"31","hashOfConfig":"19"},{"size":359,"mtime":1708041263176,"results":"32","hashOfConfig":"19"},{"size":32513,"mtime":1710641964726,"results":"33","hashOfConfig":"19"},{"size":451,"mtime":1708036886081,"results":"34","hashOfConfig":"19"},{"size":3619,"mtime":1710696377690,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1tscrds",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\index.js",[],["72","73"],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\App.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\NavBar.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Registration.js",["74","75"],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\Dashboard.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ProtectedRoute.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Profile.js",["76","77"],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Login.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Home.js",["78","79"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {post_room, get_room, get_rooms, post_favorite} from \"../../api/rooms\";\r\nimport {get_user_from_token} from \"../../api/auth\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {Box, Button, defaultTheme, fontSizes, Row, Stack,} from \"luxor-component-library\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPage: 1,\r\n            roomsPerPage: 10,\r\n            rooms: [],\r\n            selected_rooms: [],\r\n            currentUser: null,\r\n            roomNav: false,\r\n            new_room_name: \"\",\r\n            selected_room_name:\"\",\r\n            errorMessage: \"\",\r\n        };\r\n        this.onNewRoomChange = this.onNewRoomChange.bind(this);\r\n        this.onSelectedRoomChange = this.onSelectedRoomChange.bind(this);\r\n        this.addFavorite = this.addFavorite.bind(this);\r\n        this.removeFavorite = this.removeFavorite.bind(this);\r\n\r\n        this.nextPage = this.nextPage.bind(this);\r\n        this.previousPage = this.previousPage.bind(this);\r\n    }\r\n\r\n    handleFavoriteRequest(method, e, room_name) {\r\n        e.preventDefault();\r\n        let is_chosen = false;\r\n        if (method === 'add') {\r\n            is_chosen = true;\r\n        }\r\n        let body = {\r\n            \"room_name\": room_name,\r\n            \"is_chosen\": is_chosen\r\n        };\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .post(post_favorite, body)\r\n            .then((response) => {\r\n                const updatedRooms = this.state.rooms;\r\n                console.log(\"Заранее: \", updatedRooms);\r\n                updatedRooms.forEach(room => {\r\n                    if (room.room_name === room_name) {\r\n                        room.is_favorites = method === 'add';\r\n                        console.log(room.is_favorites);\r\n                    }\r\n                });\r\n                this.setState({ rooms: updatedRooms });\r\n                console.log(updatedRooms);\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    addFavorite(e, room_name) {\r\n        this.handleFavoriteRequest('add', e, room_name);\r\n    }\r\n\r\n    removeFavorite(e, room_name) {\r\n        this.handleFavoriteRequest('remove', e, room_name);\r\n    }\r\n\r\n    nextPage(e){\r\n        console.log(this.state.currentPage);\r\n        this.state.currentPage++;\r\n        this.fetchRooms();\r\n        console.log(this.state.currentPage);\r\n    }\r\n\r\n    previousPage(e){\r\n        console.log(this.state.currentPage);\r\n        if (this.state.currentPage > 1){\r\n            this.state.currentPage--;\r\n            this.fetchRooms();\r\n        } else{\r\n            console.log(\"bad\");\r\n        }\r\n    }\r\n\r\n    fetchRooms() {\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        instance\r\n            .get(get_rooms, { params: { page: this.state.currentPage, limit: this.state.roomsPerPage } })\r\n            .then((response) => {\r\n                this.setState({ rooms: response.data });\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"ERROR FETCHING ROOMS: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    onNewRoomChange(event) {\r\n        this.setState({ new_room_name: event.target.value });\r\n    }\r\n\r\n    onSelectedRoomChange(event) {\r\n        this.setState({ selected_room_name: event.target.value });\r\n    }\r\n\r\n    startNewRoomClick(e) {\r\n        const roomName = this.state.new_room_name.trim();\r\n        if (roomName === \"\") {\r\n            const errorMessage = \"Название комнаты не может быть пустым\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        // if (roomName.includes(\" \")) {\r\n        //     const errorMessage = \"Название комнаты не может быть пустым\";\r\n        //     this.setState({ errorMessage });\r\n        //     return;\r\n        // }\r\n\r\n        if (roomName.length > 20) {\r\n            const errorMessage = \"Название комнаты не может иметь более 20 символов\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        let body = {\r\n            room_name: roomName\r\n        };\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .post(post_room, body)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // Добавление в закладки\r\n                    this.addFavorite(e, roomName);\r\n                    console.log(response.data.room_name);\r\n                    // Переход в созданную комнату\r\n                    this.setState({ roomNav: response.data.room_name });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                const errorMessage = \"Название комнаты не должно дублировать название других комнат\";\r\n                this.setState({ errorMessage });\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    findRoomByName(e) {\r\n        const roomName = this.state.selected_room_name.trim();\r\n        if (roomName === \"\") {\r\n            console.log(\"Error: Room name cannot be empty\");\r\n            return;\r\n        }\r\n\r\n        if (roomName.includes(\" \")) {\r\n            console.log(\"Error: Room name cannot contain spaces\");\r\n            return;\r\n        }\r\n\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance.get(get_rooms + \"/\" + roomName)\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState({ rooms: response.data })\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching room:\", error);\r\n            });\r\n    }\r\n\r\n    handleRoomClick(e) {\r\n        e.preventDefault();\r\n        let room_name = e.currentTarget.textContent;\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .get(get_room + \"/\" + room_name)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // Проверяем, является ли response.data строкой\r\n                    // const responseData = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\r\n                    console.log(response.data);\r\n                    console.log(response.data.room_name);\r\n                    this.setState({ roomNav: response.data.room_name });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Setup redux and snag the current user and bring them into state\r\n        // Fetch all rooms (need to setup credentials from current user)\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .get(get_user_from_token)\r\n            .then((response) => {\r\n                localStorage.setItem(\"username\", response.data.username);\r\n                localStorage.setItem(\"profilePicURL\", response.data.image_url);\r\n                localStorage.setItem(\"name\", response.data.first_name);\r\n                localStorage.setItem(\"lastname\",response.data.last_name);\r\n                localStorage.setItem(\"surname\", response.data.surname);\r\n                this.setState({\r\n                    currentUser: response.data.username,\r\n                });\r\n                instance\r\n                    .get(get_rooms,  {params: {page: this.state.currentPage, limit: this.state.roomsPerPage}})\r\n                    .then((response) => {\r\n                        this.setState({ rooms: response.data });\r\n                        console.log(this.state.rooms)\r\n                    })\r\n                    .catch((err) => {\r\n                        // clear token just in case\r\n                        localStorage.removeItem(\"token\");\r\n                        console.log(\"ERROR FETCHING ROOMS: \\n\" + err);\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING CURRENT USER\\n\" + err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const input_text_style = {\r\n            padding: \"10px\",\r\n            paddingLeft: \"25px\",\r\n            paddingRight: \"25px\",\r\n            width: \"400px\",\r\n            borderRadius: \"3em\",\r\n            outline: \"none\",\r\n            border: `2px solid ${defaultTheme.palette.secondary.light}`,\r\n            fontWeight: 400,\r\n            fontSize: fontSizes.medium,\r\n            fontFamily: defaultTheme.typography.primaryFontFamily,\r\n            color: defaultTheme.palette.grey[400],\r\n        };\r\n        const { rooms, roomNav, new_room_name, errorMessage } = this.state;\r\n        const isCreateRoomButtonDisabled = new_room_name.trim() === '';\r\n\r\n        if (roomNav && roomNav !== \"None\") {\r\n            return <Redirect push to={\"/dashboard/\" + roomNav} />;\r\n        } else {\r\n            return (\r\n                <Box\r\n                    padding=\"small\"\r\n                    paddingY=\"xlarge\"\r\n                    style={{\r\n                        height: \"100vh\",\r\n                    }}\r\n                    backgroundColor={defaultTheme.palette.grey[100]}\r\n                    color={defaultTheme.palette.common.black}\r\n                    textAlign=\"center\"\r\n                >\r\n                    <Stack\r\n                        space=\"large\"\r\n                        padding=\"medium\"\r\n                        roundedCorners\r\n                        marginX=\"xxxlarge\"\r\n                    >\r\n                        <Box padding=\"medium\">\r\n                            <h1>Добро пожаловать на главную страницу: {this.state.currentUser}</h1>\r\n                        </Box>\r\n                        <Row\r\n                            space=\"none\"\r\n                            width=\"50%\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"center\"\r\n                            textAlign=\"center\"\r\n                            style={{ margin: \"auto\" }}\r\n                        >\r\n                            <Box>\r\n                                <input\r\n                                    id=\"messageText\"\r\n                                    data-testid=\"roomInput\"\r\n                                    style={input_text_style}\r\n                                    value={this.state.new_room_name}\r\n                                    onChange={this.onNewRoomChange}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Box>\r\n                            <Box>\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    size=\"medium\"\r\n                                    color=\"secondary\"\r\n                                    text=\"Создать комнату\"\r\n                                    onClick={(e) => this.startNewRoomClick(e)}\r\n                                    disabled={isCreateRoomButtonDisabled}\r\n                                />\r\n                            </Box>\r\n                        </Row>\r\n                        <Box>\r\n                            <h1>Список комнат</h1>\r\n                            <Row\r\n                                space=\"none\"\r\n                                width=\"50%\"\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"center\"\r\n                                textAlign=\"center\"\r\n                                style={{ margin: \"auto\" }}\r\n                            >\r\n                                <Box>\r\n                                    <input\r\n                                        id=\"messageText\"\r\n                                        data-testid=\"searchInput\"\r\n                                        style={input_text_style}\r\n                                        value={this.state.selected_room_name}\r\n                                        onChange={this.onSelectedRoomChange}\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"outline\"\r\n                                        size=\"medium\"\r\n                                        color=\"secondary\"\r\n                                        text=\"Поиск комнаты\"\r\n                                        onClick={(e) => this.findRoomByName(e)}\r\n                                    />\r\n                                </Box>\r\n                            </Row>\r\n                            <Box\r\n                                textAlign=\"center\"\r\n                                padding=\"small\"\r\n                                style={{ justifyContent: \"center\", height: \"300px\" }}\r\n                            >\r\n                                {rooms.map((room) => {\r\n                                    if (room.is_favorites === true) {\r\n                                        return (\r\n                                            <Box margin=\"small\" key={room.id}>\r\n                                                <Chip\r\n                                                    data-testid=\"TEST1\"\r\n                                                    icon={FavoriteIcon}\r\n                                                    onClick={(e) => this.handleRoomClick(e)}\r\n                                                    label={room.room_name}\r\n                                                    id={room.room_name}\r\n                                                    onDelete={(e) =>\r\n                                                        this.removeFavorite(e, room.room_name)\r\n                                                    }\r\n                                                    deleteIcon={<FavoriteIcon />}\r\n                                                />\r\n                                            </Box>\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <Box margin=\"20px\" key={room.id}>\r\n                                                <Chip\r\n                                                    data-testid=\"TEST2\"\r\n                                                    icon={FavoriteBorderIcon}\r\n                                                    onClick={(e) => this.handleRoomClick(e)}\r\n                                                    label={room.room_name}\r\n                                                    id={room.room_name}\r\n                                                    onDelete={(e) => this.addFavorite(e, room.room_name)}\r\n                                                    deleteIcon={<FavoriteBorderIcon />}\r\n                                                />\r\n                                            </Box>\r\n                                        );\r\n                                    }\r\n                                })}\r\n                                <Box color=\"red\" padding=\"small\">\r\n                                    {errorMessage !== \"\" && <p>{errorMessage}</p>}\r\n                                </Box>\r\n                            </Box>\r\n                            <Row>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"solid\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        text=\"Предыдущая страница\"\r\n                                        onClick={this.previousPage}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"outline\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        text=\"Следующая страница\"\r\n                                        onClick={this.nextPage}\r\n                                    />\r\n                                </Box>\r\n                            </Row>\r\n                        </Box>\r\n                    </Stack>\r\n                </Box>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Favorites.js",["80","81","82","83","84","85","86"],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Logout.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\VideoChatPage.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\auth.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ChatModule.js",["87"],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\rooms.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\VideoChatModule.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":3,"column":37,"nodeType":"94","messageId":"95","endLine":3,"endColumn":43},{"ruleId":"96","severity":1,"message":"97","line":63,"column":59,"nodeType":"98","messageId":"99","endLine":63,"endColumn":60,"suggestions":"100"},{"ruleId":"92","severity":1,"message":"101","line":2,"column":36,"nodeType":"94","messageId":"95","endLine":2,"endColumn":45},{"ruleId":"96","severity":1,"message":"97","line":117,"column":51,"nodeType":"98","messageId":"99","endLine":117,"endColumn":52,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":83,"column":9,"nodeType":"105","messageId":"106","endLine":83,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":91,"column":13,"nodeType":"105","messageId":"106","endLine":91,"endColumn":23},{"ruleId":"92","severity":1,"message":"107","line":3,"column":9,"nodeType":"94","messageId":"95","endLine":3,"endColumn":18},{"ruleId":"92","severity":1,"message":"108","line":3,"column":20,"nodeType":"94","messageId":"95","endLine":3,"endColumn":29},{"ruleId":"92","severity":1,"message":"109","line":3,"column":31,"nodeType":"94","messageId":"95","endLine":3,"endColumn":40},{"ruleId":"92","severity":1,"message":"110","line":7,"column":8,"nodeType":"94","messageId":"95","endLine":7,"endColumn":25},{"ruleId":"103","severity":1,"message":"104","line":59,"column":9,"nodeType":"105","messageId":"106","endLine":59,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":67,"column":13,"nodeType":"105","messageId":"106","endLine":67,"endColumn":23},{"ruleId":"92","severity":1,"message":"111","line":270,"column":32,"nodeType":"94","messageId":"95","endLine":270,"endColumn":36},{"ruleId":"92","severity":1,"message":"112","line":250,"column":23,"nodeType":"94","messageId":"95","endLine":250,"endColumn":34},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["115","116"],"'fontSizes' is defined but never used.",["117","118"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'get_rooms' is defined but never used.","'post_room' is defined but never used.","'favorites' is defined but never used.","'CancelRoundedIcon' is defined but never used.","'user' is assigned a value but never used.","'aspectRatio' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"119","fix":"120","desc":"121"},{"messageId":"122","fix":"123","desc":"124"},{"messageId":"119","fix":"125","desc":"121"},{"messageId":"122","fix":"126","desc":"124"},"removeEscape",{"range":"127","text":"128"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"129","text":"130"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"131","text":"128"},{"range":"132","text":"130"},[2121,2122],"",[2121,2121],"\\",[3514,3515],[3514,3514]]