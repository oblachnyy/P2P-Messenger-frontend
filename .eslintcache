[{"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\index.js":"1","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\App.js":"3","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\NavBar.js":"4","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Registration.js":"5","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\Dashboard.js":"6","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ProtectedRoute.js":"7","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Profile.js":"8","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Login.js":"9","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Home.js":"10","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Favorites.js":"11","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Logout.js":"12","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\VideoChatPage.js":"13","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\auth.js":"14","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ChatModule.js":"15","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\rooms.js":"16","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\VideoChatModule.js":"17"},{"size":515,"mtime":1708044757748,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1707921440121,"results":"20","hashOfConfig":"19"},{"size":1376,"mtime":1708044757747,"results":"21","hashOfConfig":"19"},{"size":2558,"mtime":1708041331653,"results":"22","hashOfConfig":"19"},{"size":10564,"mtime":1710696377691,"results":"23","hashOfConfig":"19"},{"size":2147,"mtime":1708038529381,"results":"24","hashOfConfig":"19"},{"size":368,"mtime":1708025387185,"results":"25","hashOfConfig":"19"},{"size":17090,"mtime":1710696377694,"results":"26","hashOfConfig":"19"},{"size":7120,"mtime":1709740400723,"results":"27","hashOfConfig":"19"},{"size":18740,"mtime":1710174005863,"results":"28","hashOfConfig":"19"},{"size":17497,"mtime":1710696377693,"results":"29","hashOfConfig":"19"},{"size":691,"mtime":1708025387188,"results":"30","hashOfConfig":"19"},{"size":2247,"mtime":1710696377692,"results":"31","hashOfConfig":"19"},{"size":359,"mtime":1708041263176,"results":"32","hashOfConfig":"19"},{"size":32513,"mtime":1710641964726,"results":"33","hashOfConfig":"19"},{"size":451,"mtime":1708036886081,"results":"34","hashOfConfig":"19"},{"size":3619,"mtime":1710696377690,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1tscrds",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\index.js",[],["76","77"],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\App.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\NavBar.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Registration.js",["78","79"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport { Redirect, BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Box, Button, defaultTheme, fontSizes, Row, Stack } from \"luxor-component-library\";\r\nimport { login, registration } from \"../../api/auth\";\r\n\r\nclass Registration extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isRegisteredIn: false,\r\n            isLoggedIn: false,\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            error_message: \"\",\r\n            warning_message: \"\",\r\n            isFormValid: false,\r\n        };\r\n        this.registerHandler = this.registerHandler.bind(this);\r\n        this.clearFields = this.clearFields.bind(this);\r\n        this.passwordChange = this.passwordChange.bind(this);\r\n        this.usernameChange = this.usernameChange.bind(this);\r\n    }\r\n\r\n    clearFields = () => {\r\n        this.setState({\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            error_message: \"\",\r\n            warning_message: \"\",\r\n            isFormValid: false,\r\n        });\r\n    };\r\n\r\n    emailChange(e) {\r\n        const email = e.target.value;\r\n        const emailRegex = /^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/;\r\n        const isEmailValid = emailRegex.test(email);\r\n\r\n        this.setState({\r\n            email,\r\n            isEmailValid,\r\n            error_message: isEmailValid ? \"\" : \"Некорректный формат email\"\r\n        }, this.validateForm);\r\n    }\r\n\r\n    usernameChange(e) {\r\n        const username = e.target.value;\r\n        const usernamePattern = /^(?=.*[A-Za-zА-Яа-я])(?=.*[0-9]).{4,20}$/;\r\n        const isUsernameValid = usernamePattern.test(username);\r\n\r\n        this.setState({\r\n            username,\r\n            isUsernameValid,\r\n            error_message: isUsernameValid ? \"\" : \"Имя пользователя должно содержать от 4 до 20 символов и должно включать буквы и цифры.\"\r\n        }, this.validateForm);\r\n    }\r\n\r\n    passwordChange(e) {\r\n        const password = e.target.value;\r\n        const passwordPattern = /^[a-zA-Z0-9!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/-]{6,40}$/;\r\n        const isPasswordValid = passwordPattern.test(password);\r\n\r\n        this.setState({\r\n            password,\r\n            isPasswordValid,\r\n            error_message: isPasswordValid ? \"\" : \"Пароль должен содержать от 6 до 40 символов и может включать буквы, цифры и спец символы.\"\r\n        }, this.validateForm);\r\n    }\r\n\r\n    validateForm() {\r\n        const { isEmailValid, isUsernameValid, isPasswordValid } = this.state;\r\n        const isFormValid = isEmailValid && isUsernameValid && isPasswordValid;\r\n\r\n        this.setState({\r\n            isFormValid\r\n        });\r\n    }\r\n\r\n    registerHandler() {\r\n        const { isEmailValid, isUsernameValid, isPasswordValid } = this.state;\r\n\r\n        if (isEmailValid && isUsernameValid && isPasswordValid) {\r\n            // Все поля валидны, выполняем запрос на регистрацию\r\n            axios.post(registration, {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                is_active: true,\r\n                is_superuser: false,\r\n                is_verified: false,\r\n                username: this.state.username\r\n            }, {\r\n                headers: {\r\n                    'accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then((response) => {\r\n                    if (response.status === 201) {\r\n                        this.setState({ isRegisteredIn: true });\r\n                        this.loginHandler();\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    // Обработка ошибок\r\n                    if (error.response && error.response.status === 400) {\r\n                        console.log(error.response.data);\r\n                        if (error.response.data.detail === \"REGISTER_USER_ALREADY_EXISTS\") {\r\n                            this.setState({ error_message: \"Пользователь с таким email существует.\" });\r\n                        }\r\n                    } else {\r\n                        console.log(error);\r\n                        this.setState({ error_message: \"Ошибка во время регистрации.\" });\r\n                    }\r\n                });\r\n        } else {\r\n            // Не все поля валидны, выполните необходимые действия\r\n            this.setState({ error_message: \"Пожалуйста, введите корректные данные во все поля.\" });\r\n        }\r\n    }\r\n\r\n\r\n    loginHandler() {\r\n        const loginParams = new URLSearchParams();\r\n        loginParams.append(\"username\", this.state.username);\r\n        loginParams.append(\"password\", this.state.password);\r\n        let loginConfig = {\r\n            headers: {\r\n                \"content-type\": \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                accept: \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n            },\r\n        };\r\n        axios.post(login, loginParams, loginConfig)\r\n            .then((loginResponse) => {\r\n                console.log(loginResponse.data.access_token);\r\n                if (loginResponse.data.access_token !== undefined) {\r\n                    localStorage.setItem(\"token\", loginResponse.data.access_token);\r\n                    localStorage.setItem(\"email\", this.state.username);\r\n                    this.setState({ isLoggedIn: true });\r\n                }\r\n            })\r\n            .catch((loginErr) => {\r\n                console.log(\"ERROR LOGIN: \\n\" + loginErr);\r\n                this.setState({\r\n                    error_message: \"Error with logging in after registration\",\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const input_text_style = {\r\n            padding: \"10px\",\r\n            paddingLeft: \"25px\",\r\n            paddingRight: \"25px\",\r\n            width: \"400px\",\r\n            borderRadius: \"3em\",\r\n            outline: \"none\",\r\n            border: `2px solid ${defaultTheme.palette.primary.main}`,\r\n            fontWeight: 400,\r\n            fontSize: fontSizes.medium,\r\n            fontFamily: defaultTheme.typography.primaryFontFamily,\r\n            color: defaultTheme.palette.grey[400],\r\n        };\r\n        const { isRegisteredIn, isLoggedIn, error_message } = this.state;\r\n        if (isRegisteredIn === true && isLoggedIn === true) {\r\n            return <Redirect push to=\"/home\" />;\r\n        } else {\r\n            return (<Box\r\n                padding=\"large\"\r\n                height=\"720px\"\r\n                backgroundColor={defaultTheme.palette.grey[100]}\r\n                textAlign=\"center\"\r\n                style={{\r\n                    height: \"100vh\",\r\n                }}\r\n            >\r\n                <Stack>\r\n                    <Box\r\n                        style={{ fontSize: \"2rem\" }}\r\n                        color={defaultTheme.palette.secondary.light}\r\n                        paddingBottom=\"large\"\r\n                    >\r\n            <span>\r\n              <h1 style={{ color: defaultTheme.palette.secondary.light }}>\r\n                PolyTex\r\n              </h1>\r\n              <h1 style={{ color: defaultTheme.palette.primary.main }}>\r\n                Chat\r\n              </h1>\r\n            </span>\r\n                    </Box>\r\n                    <Stack space=\"medium\" padding=\"medium\">\r\n                        <Box>\r\n                            <input\r\n                                style={input_text_style}\r\n                                value={this.state.email}\r\n                                onChange={(e) => this.emailChange(e)}\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Введите email\"\r\n                                name=\"email\"\r\n                                required\r\n                            />\r\n                        </Box>\r\n                        <Box>\r\n                            <input\r\n                                style={input_text_style}\r\n                                value={this.state.username}\r\n                                onChange={(e) => this.usernameChange(e)}\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Введите имя пользователя\"\r\n                                name=\"uname\"\r\n                                required\r\n                            />\r\n                        </Box>\r\n                        <Box>\r\n                            <input\r\n                                style={input_text_style}\r\n                                value={this.state.password}\r\n                                onChange={(e) => this.passwordChange(e)}\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Введите пароль\"\r\n                                name=\"psw\"\r\n                                type=\"password\"\r\n                                required\r\n                            />\r\n                        </Box>\r\n                    </Stack>\r\n                    <Row>\r\n                        <Box>\r\n                            <Button\r\n                                variant=\"outline\"\r\n                                color=\"primary\"\r\n                                size=\"medium\"\r\n                                text=\"Зарегистрироваться\"\r\n                                onClick={this.registerHandler}\r\n                                disabled={!this.state.isFormValid}\r\n                            />\r\n                            <Button\r\n                                variant=\"outline\"\r\n                                color=\"primary\"\r\n                                size=\"medium\"\r\n                                text=\"Очистить\"\r\n                                onClick={this.clearFields}\r\n                            />\r\n                        </Box>\r\n                    </Row>\r\n                    <Box color=\"red\" padding=\"small\">\r\n                        {error_message !== \"\" && <p>{error_message}</p>}\r\n                    </Box>\r\n                </Stack>\r\n            </Box>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Registration;\r\n","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\Dashboard.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ProtectedRoute.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Profile.js",["80","81"],"import React from \"react\";\r\nimport {Box, Button, defaultTheme, fontSizes, Row, Stack,} from \"luxor-component-library\";\r\nimport {get_user_from_token, upload_profile_pic} from \"../../api/auth\";\r\nimport axios from \"axios\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            new_email: \"\",\r\n            new_username: \"\",\r\n            new_password: \"\",\r\n            last_name: \"\",\r\n            first_name: \"\",\r\n            surname: \"\",\r\n            isLoaded: false,\r\n            isEditMode: false,\r\n            shouldRedirect: false,\r\n            errorMessage: \"\",\r\n            isAvatarEditMode: false,\r\n        };\r\n        this.onUsernameChange = this.onUsernameChange.bind(this);\r\n        this.onEmailChange = this.onEmailChange.bind(this);\r\n        this.onPasswordChange = this.onPasswordChange.bind(this);\r\n        this.onEnterHandler = this.onEnterHandler.bind(this);\r\n        this.imageUpload = this.imageUpload.bind(this);\r\n        this.userDateUpload = this.userDateUpload.bind(this);\r\n        this.toggleEditMode = this.toggleEditMode.bind(this);\r\n        this.toggleAvatarEditMode = this.toggleAvatarEditMode.bind(this);\r\n        this.onLastNameChange = this.onLastNameChange.bind(this);\r\n        this.onFirstNameChange = this.onFirstNameChange.bind(this);\r\n        this.onSurnameChange = this.onSurnameChange.bind(this);\r\n    }\r\n\r\n    onLastNameChange(e) {\r\n        e.preventDefault();\r\n        const last_name = e.target.value;\r\n        this.setState({ last_name });\r\n    }\r\n\r\n    onFirstNameChange(e) {\r\n        e.preventDefault();\r\n        const first_name = e.target.value;\r\n        this.setState({ first_name });\r\n    }\r\n\r\n    onSurnameChange(e) {\r\n        e.preventDefault();\r\n        const surname = e.target.value;\r\n        this.setState({ surname });\r\n    }\r\n\r\n    onUsernameChange(e) {\r\n        e.preventDefault();\r\n        const new_username = e.target.value;\r\n\r\n        // Обнуляем ошибку при изменении значения логина\r\n        this.setState({\r\n            new_username,\r\n            errorMessage: \"\",\r\n        });\r\n\r\n        const pattern = /^(?=.*[A-Za-zА-Яа-я])(?=.*[0-9]).{4,20}$/;\r\n\r\n        if (\r\n            new_username.length >= 4 &&\r\n            new_username.length <= 20 &&\r\n            pattern.test(new_username)\r\n        ) {\r\n            this.setState({ new_username });\r\n        }\r\n    }\r\n\r\n    onEmailChange(e) {\r\n        e.preventDefault();\r\n        const new_email = e.target.value;\r\n\r\n        // Обнуляем ошибку при изменении значения почты\r\n        this.setState({\r\n            new_email,\r\n            errorMessage: \"\",\r\n        });\r\n\r\n        const pattern = /^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/;\r\n\r\n        if (\r\n            pattern.test(new_email)\r\n        ) {\r\n            this.setState({ new_email });\r\n        }\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState((prevState) => ({\r\n            isEditMode: !prevState.isEditMode,\r\n        }));\r\n    }\r\n\r\n    toggleAvatarEditMode() {\r\n        this.setState((prevState) => ({\r\n            isAvatarEditMode: !prevState.isAvatarEditMode,\r\n        }));\r\n    }\r\n\r\n    onPasswordChange(e) {\r\n        e.preventDefault();\r\n        const new_password = e.target.value;\r\n\r\n        // Обнуляем ошибку при изменении значения пароля\r\n        this.setState({\r\n            new_password,\r\n            errorMessage: \"\",\r\n        });\r\n\r\n        const pattern = /^[a-zA-Z0-9!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/-]+$/;\r\n\r\n        if (\r\n            new_password.length >= 6 &&\r\n            new_password.length <= 40 &&\r\n            pattern.test(new_password)\r\n        ) {\r\n            this.setState({ new_password });\r\n        }\r\n    }\r\n\r\n    onEnterHandler(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    userDateUpload(e) {\r\n        e.preventDefault();\r\n\r\n        if (\r\n            !this.state.new_email ||\r\n            !this.state.new_username ||\r\n            !this.state.new_password ||\r\n            !this.state.last_name ||\r\n            !this.state.first_name\r\n        ) {\r\n            const errorMessage = \"Все поля должны быть заполнены\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        // В этом месте добавлены условия для проверки валидности ФИО перед сохранением изменений\r\n        const namePattern = /^[a-zA-ZА-Яа-я]+$/;\r\n\r\n        if (\r\n            !namePattern.test(this.state.last_name) ||\r\n            !namePattern.test(this.state.first_name)\r\n        ) {\r\n            const errorMessage = \"Фамилия, имя и отчество могут содержать только буквы\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        // Проверка валидности отчества, если оно заполнено\r\n        if (this.state.surname && !namePattern.test(this.state.surname)) {\r\n            const errorMessage = \"Фамилия, имя и отчество могут содержать только буквы\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        let body = {\r\n            email: this.state.new_email,\r\n            username: this.state.new_username,\r\n            password: this.state.new_password,\r\n            last_name: this.state.last_name,\r\n            first_name: this.state.first_name,\r\n            surname: this.state.surname,\r\n        };\r\n\r\n        let token = localStorage.getItem(\"token\");\r\n\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                Accept: \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        instance\r\n            .patch(\"http://localhost:8000/api/user/me\", body)\r\n            .then((response) => {\r\n                this.setState({\r\n                    isChangesSaved: true,\r\n                    message: \"Изменения сохранены\",\r\n                    shouldRedirect: true,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(\"ERROR Updating User Data\");\r\n                console.error(err);\r\n                const errorMessage = \"Произошла ошибка при сохранении изменений\";\r\n                this.setState({ errorMessage });\r\n            });\r\n    }\r\n\r\n    imageUpload(e) {\r\n        e.preventDefault();\r\n        console.log(\"Image Upload\");\r\n        const files = e.target.files;\r\n        console.log(files[0]);\r\n        const formData = new FormData();\r\n        formData.append(\"file\", files[0], files[0].name);\r\n\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                //\"Content-Type\": \"multipart/form-data\",\r\n                \"Content-Type\": files[0].type,\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                accept: \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .post(upload_profile_pic, formData)\r\n            .then((response) => {\r\n                localStorage.setItem(\"profilePicURL\", response.data.image_url);\r\n                this.setState({user: response.data, isLoaded: true,shouldRedirect: true,});\r\n            })\r\n            .catch((err) => {\r\n                console.error(\"ERROR Uploading Profile Picture\");\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem(\"token\");\r\n        const cachedProfilePicURL = localStorage.getItem(\"profilePicURL\");\r\n        if (cachedProfilePicURL) {\r\n            this.setState({user: {profile_pic_img_src: cachedProfilePicURL}, isLoaded: true});\r\n        } else {\r\n            const instance = axios.create({\r\n                timeout: 1000,\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\",\r\n                    \"Accept\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            instance\r\n                .get(get_user_from_token)\r\n                .then((response) => {\r\n                    const link = response.data;\r\n                    this.setState({user: {profile_pic_img_src: link}, isLoaded: true});\r\n                    localStorage.setItem(\"profilePicURL\", link);\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"Ошибка получения URL фотографии пользователя\", error);\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            isLoaded,\r\n            user,\r\n            isEditMode,\r\n            shouldRedirect,\r\n            errorMessage,\r\n        } = this.state;\r\n        let avatar_image_url = localStorage.getItem(\"profilePicURL\");\r\n\r\n        if (shouldRedirect) {\r\n            return <Redirect to=\"/home\" />;\r\n        }\r\n\r\n        if (avatar_image_url === \"null\" || avatar_image_url === null) {\r\n            localStorage.setItem(\r\n                \"profilePicURL\",\r\n                \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Anonymous.svg/1481px-Anonymous.svg.png\"\r\n            );\r\n        }\r\n\r\n        if (!isLoaded) {\r\n            return <Box>Loading...</Box>;\r\n        } else {\r\n            return (\r\n                <Box\r\n                    margin=\"none\"\r\n                    padding=\"large\"\r\n                    height=\"100vh\"\r\n                    backgroundColor={defaultTheme.palette.grey[200]}\r\n                >\r\n                    <Row>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                            <Stack\r\n                                space=\"medium\"\r\n                                textAlign=\"center\"\r\n                                left=\"32.5%\"\r\n                                position=\"relative\"\r\n                            >\r\n                                <Box\r\n                                    styles={{\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\",\r\n                                    }}\r\n                                >\r\n                                    <img\r\n                                        className=\"avatar\"\r\n                                        src={avatar_image_url}\r\n                                        alt={\"Photo of \" + user.username}\r\n                                        style={{\r\n                                            width: 90,\r\n                                            height: 90,\r\n                                            margin: \"0 auto\",\r\n                                            borderRadius: \"50%\", // Делает изображение круглым\r\n                                        }}\r\n                                    />\r\n                                    <Box\r\n                                        display=\"flex\"\r\n                                        alignItems=\"center\"\r\n                                        justifyContent=\"center\"\r\n                                    >\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            id=\"fileUpload\"\r\n                                            accept=\"image/png, image/jpeg, image/jpg\"\r\n                                            onChange={this.imageUpload}\r\n                                            disabled={!this.state.isAvatarEditMode}\r\n                                        />\r\n                                    </Box>\r\n                                    <h1>Здравствуйте, {localStorage.getItem(\"username\")}</h1>\r\n                                    <h1>{localStorage.getItem(\"lastname\") !== \"null\" ? localStorage.getItem(\"lastname\") : \"\"} {localStorage.getItem(\"name\") !== \"null\" ? localStorage.getItem(\"name\") : \"\"} {localStorage.getItem(\"surname\") !== \"null\" ? localStorage.getItem(\"surname\") : \"\"} </h1>\r\n                                </Box>\r\n                                <Box>\r\n                                    <input\r\n                                        value={this.state.new_email}\r\n                                        placeholder=\"Новый e-mail\"\r\n                                        onChange={this.onEmailChange}\r\n                                        autoComplete=\"off\"\r\n                                        disabled={!isEditMode}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <input\r\n                                        value={this.state.new_username}\r\n                                        placeholder=\"Новый логин\"\r\n                                        onChange={this.onUsernameChange}\r\n                                        autoComplete=\"off\"\r\n                                        disabled={!isEditMode}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <input\r\n                                        value={this.state.new_password}\r\n                                        onChange={this.onPasswordChange}\r\n                                        onKeyUp={(e) => this.onEnterHandler(e)}\r\n                                        type=\"password\"\r\n                                        placeholder=\"Новый пароль\"\r\n                                        autoComplete=\"off\"\r\n                                        disabled={!isEditMode}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <input\r\n                                        value={this.state.last_name}\r\n                                        placeholder=\"Фамилия\"\r\n                                        onChange={this.onLastNameChange}\r\n                                        autoComplete=\"off\"\r\n                                        disabled={!this.state.isEditMode}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <input\r\n                                        value={this.state.first_name}\r\n                                        placeholder=\"Имя\"\r\n                                        onChange={this.onFirstNameChange}\r\n                                        autoComplete=\"off\"\r\n                                        disabled={!this.state.isEditMode}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <input\r\n                                        value={this.state.surname}\r\n                                        placeholder=\"Отчество\"\r\n                                        onChange={this.onSurnameChange}\r\n                                        autoComplete=\"off\"\r\n                                        disabled={!this.state.isEditMode}\r\n                                    />\r\n                                </Box>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    onClick={this.userDateUpload}\r\n                                    text=\"Сохранить изменения\"\r\n                                    disabled={!isEditMode}\r\n                                />\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    onClick={this.toggleAvatarEditMode}\r\n                                    text={\"Изменить аватарку\"}\r\n                                />\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    onClick={this.toggleEditMode}\r\n                                    text={isEditMode ? \"Отменить\" : \"Изменить данные\"}\r\n                                    style={{ width: \"150px\", height: \"35px\" }}\r\n                                />\r\n                                <Box color=\"red\" padding=\"small\">\r\n                                    {errorMessage !== \"\" && <p>{errorMessage}</p>}\r\n                                </Box>\r\n                            </Stack>\r\n                        </Box>\r\n                    </Row>\r\n                </Box>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Profile;","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Login.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Home.js",["82","83"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {post_room, get_room, get_rooms, post_favorite} from \"../../api/rooms\";\r\nimport {get_user_from_token} from \"../../api/auth\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {Box, Button, defaultTheme, fontSizes, Row, Stack,} from \"luxor-component-library\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPage: 1,\r\n            roomsPerPage: 10,\r\n            rooms: [],\r\n            selected_rooms: [],\r\n            currentUser: null,\r\n            roomNav: false,\r\n            new_room_name: \"\",\r\n            selected_room_name:\"\",\r\n            errorMessage: \"\",\r\n        };\r\n        this.onNewRoomChange = this.onNewRoomChange.bind(this);\r\n        this.onSelectedRoomChange = this.onSelectedRoomChange.bind(this);\r\n        this.addFavorite = this.addFavorite.bind(this);\r\n        this.removeFavorite = this.removeFavorite.bind(this);\r\n\r\n        this.nextPage = this.nextPage.bind(this);\r\n        this.previousPage = this.previousPage.bind(this);\r\n    }\r\n\r\n    handleFavoriteRequest(method, e, room_name) {\r\n        e.preventDefault();\r\n        let is_chosen = false;\r\n        if (method === 'add') {\r\n            is_chosen = true;\r\n        }\r\n        let body = {\r\n            \"room_name\": room_name,\r\n            \"is_chosen\": is_chosen\r\n        };\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .post(post_favorite, body)\r\n            .then((response) => {\r\n                const updatedRooms = this.state.rooms;\r\n                console.log(\"Заранее: \", updatedRooms);\r\n                updatedRooms.forEach(room => {\r\n                    if (room.room_name === room_name) {\r\n                        room.is_favorites = method === 'add';\r\n                        console.log(room.is_favorites);\r\n                    }\r\n                });\r\n                this.setState({ rooms: updatedRooms });\r\n                console.log(updatedRooms);\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    addFavorite(e, room_name) {\r\n        this.handleFavoriteRequest('add', e, room_name);\r\n    }\r\n\r\n    removeFavorite(e, room_name) {\r\n        this.handleFavoriteRequest('remove', e, room_name);\r\n    }\r\n\r\n    nextPage(e){\r\n        console.log(this.state.currentPage);\r\n        this.state.currentPage++;\r\n        this.fetchRooms();\r\n        console.log(this.state.currentPage);\r\n    }\r\n\r\n    previousPage(e){\r\n        console.log(this.state.currentPage);\r\n        if (this.state.currentPage > 1){\r\n            this.state.currentPage--;\r\n            this.fetchRooms();\r\n        } else{\r\n            console.log(\"bad\");\r\n        }\r\n    }\r\n\r\n    fetchRooms() {\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        instance\r\n            .get(get_rooms, { params: { page: this.state.currentPage, limit: this.state.roomsPerPage } })\r\n            .then((response) => {\r\n                this.setState({ rooms: response.data });\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"ERROR FETCHING ROOMS: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    onNewRoomChange(event) {\r\n        this.setState({ new_room_name: event.target.value });\r\n    }\r\n\r\n    onSelectedRoomChange(event) {\r\n        this.setState({ selected_room_name: event.target.value });\r\n    }\r\n\r\n    startNewRoomClick(e) {\r\n        const roomName = this.state.new_room_name.trim();\r\n        if (roomName === \"\") {\r\n            const errorMessage = \"Название комнаты не может быть пустым\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        // if (roomName.includes(\" \")) {\r\n        //     const errorMessage = \"Название комнаты не может быть пустым\";\r\n        //     this.setState({ errorMessage });\r\n        //     return;\r\n        // }\r\n\r\n        if (roomName.length > 20) {\r\n            const errorMessage = \"Название комнаты не может иметь более 20 символов\";\r\n            this.setState({ errorMessage });\r\n            return;\r\n        }\r\n\r\n        let body = {\r\n            room_name: roomName\r\n        };\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .post(post_room, body)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // Добавление в закладки\r\n                    this.addFavorite(e, roomName);\r\n                    console.log(response.data.room_name);\r\n                    // Переход в созданную комнату\r\n                    this.setState({ roomNav: response.data.room_name });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                const errorMessage = \"Название комнаты не должно дублировать название других комнат\";\r\n                this.setState({ errorMessage });\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    findRoomByName(e) {\r\n        const roomName = this.state.selected_room_name.trim();\r\n        if (roomName === \"\") {\r\n            console.log(\"Error: Room name cannot be empty\");\r\n            return;\r\n        }\r\n\r\n        if (roomName.includes(\" \")) {\r\n            console.log(\"Error: Room name cannot contain spaces\");\r\n            return;\r\n        }\r\n\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance.get(get_rooms + \"/\" + roomName)\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState({ rooms: response.data })\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching room:\", error);\r\n            });\r\n    }\r\n\r\n    handleRoomClick(e) {\r\n        e.preventDefault();\r\n        let room_name = e.currentTarget.textContent;\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .get(get_room + \"/\" + room_name)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // Проверяем, является ли response.data строкой\r\n                    // const responseData = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\r\n                    console.log(response.data);\r\n                    console.log(response.data.room_name);\r\n                    this.setState({ roomNav: response.data.room_name });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Setup redux and snag the current user and bring them into state\r\n        // Fetch all rooms (need to setup credentials from current user)\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .get(get_user_from_token)\r\n            .then((response) => {\r\n                localStorage.setItem(\"username\", response.data.username);\r\n                localStorage.setItem(\"profilePicURL\", response.data.image_url);\r\n                localStorage.setItem(\"name\", response.data.first_name);\r\n                localStorage.setItem(\"lastname\",response.data.last_name);\r\n                localStorage.setItem(\"surname\", response.data.surname);\r\n                this.setState({\r\n                    currentUser: response.data.username,\r\n                });\r\n                instance\r\n                    .get(get_rooms,  {params: {page: this.state.currentPage, limit: this.state.roomsPerPage}})\r\n                    .then((response) => {\r\n                        this.setState({ rooms: response.data });\r\n                        console.log(this.state.rooms)\r\n                    })\r\n                    .catch((err) => {\r\n                        // clear token just in case\r\n                        localStorage.removeItem(\"token\");\r\n                        console.log(\"ERROR FETCHING ROOMS: \\n\" + err);\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING CURRENT USER\\n\" + err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const input_text_style = {\r\n            padding: \"10px\",\r\n            paddingLeft: \"25px\",\r\n            paddingRight: \"25px\",\r\n            width: \"400px\",\r\n            borderRadius: \"3em\",\r\n            outline: \"none\",\r\n            border: `2px solid ${defaultTheme.palette.secondary.light}`,\r\n            fontWeight: 400,\r\n            fontSize: fontSizes.medium,\r\n            fontFamily: defaultTheme.typography.primaryFontFamily,\r\n            color: defaultTheme.palette.grey[400],\r\n        };\r\n        const { rooms, roomNav, new_room_name, errorMessage } = this.state;\r\n        const isCreateRoomButtonDisabled = new_room_name.trim() === '';\r\n\r\n        if (roomNav && roomNav !== \"None\") {\r\n            return <Redirect push to={\"/dashboard/\" + roomNav} />;\r\n        } else {\r\n            return (\r\n                <Box\r\n                    padding=\"small\"\r\n                    paddingY=\"xlarge\"\r\n                    style={{\r\n                        height: \"100vh\",\r\n                    }}\r\n                    backgroundColor={defaultTheme.palette.grey[100]}\r\n                    color={defaultTheme.palette.common.black}\r\n                    textAlign=\"center\"\r\n                >\r\n                    <Stack\r\n                        space=\"large\"\r\n                        padding=\"medium\"\r\n                        roundedCorners\r\n                        marginX=\"xxxlarge\"\r\n                    >\r\n                        <Box padding=\"medium\">\r\n                            <h1>Добро пожаловать на главную страницу: {this.state.currentUser}</h1>\r\n                        </Box>\r\n                        <Row\r\n                            space=\"none\"\r\n                            width=\"50%\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"center\"\r\n                            textAlign=\"center\"\r\n                            style={{ margin: \"auto\" }}\r\n                        >\r\n                            <Box>\r\n                                <input\r\n                                    id=\"messageText\"\r\n                                    data-testid=\"roomInput\"\r\n                                    style={input_text_style}\r\n                                    value={this.state.new_room_name}\r\n                                    onChange={this.onNewRoomChange}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Box>\r\n                            <Box>\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    size=\"medium\"\r\n                                    color=\"secondary\"\r\n                                    text=\"Создать комнату\"\r\n                                    onClick={(e) => this.startNewRoomClick(e)}\r\n                                    disabled={isCreateRoomButtonDisabled}\r\n                                />\r\n                            </Box>\r\n                        </Row>\r\n                        <Box>\r\n                            <h1>Список комнат</h1>\r\n                            <Row\r\n                                space=\"none\"\r\n                                width=\"50%\"\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"center\"\r\n                                textAlign=\"center\"\r\n                                style={{ margin: \"auto\" }}\r\n                            >\r\n                                <Box>\r\n                                    <input\r\n                                        id=\"messageText\"\r\n                                        data-testid=\"searchInput\"\r\n                                        style={input_text_style}\r\n                                        value={this.state.selected_room_name}\r\n                                        onChange={this.onSelectedRoomChange}\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"outline\"\r\n                                        size=\"medium\"\r\n                                        color=\"secondary\"\r\n                                        text=\"Поиск комнаты\"\r\n                                        onClick={(e) => this.findRoomByName(e)}\r\n                                    />\r\n                                </Box>\r\n                            </Row>\r\n                            <Box\r\n                                textAlign=\"center\"\r\n                                padding=\"small\"\r\n                                style={{ justifyContent: \"center\", height: \"300px\" }}\r\n                            >\r\n                                {rooms.map((room) => {\r\n                                    if (room.is_favorites === true) {\r\n                                        return (\r\n                                            <Box margin=\"small\" key={room.id}>\r\n                                                <Chip\r\n                                                    data-testid=\"TEST1\"\r\n                                                    icon={FavoriteIcon}\r\n                                                    onClick={(e) => this.handleRoomClick(e)}\r\n                                                    label={room.room_name}\r\n                                                    id={room.room_name}\r\n                                                    onDelete={(e) =>\r\n                                                        this.removeFavorite(e, room.room_name)\r\n                                                    }\r\n                                                    deleteIcon={<FavoriteIcon />}\r\n                                                />\r\n                                            </Box>\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <Box margin=\"20px\" key={room.id}>\r\n                                                <Chip\r\n                                                    data-testid=\"TEST2\"\r\n                                                    icon={FavoriteBorderIcon}\r\n                                                    onClick={(e) => this.handleRoomClick(e)}\r\n                                                    label={room.room_name}\r\n                                                    id={room.room_name}\r\n                                                    onDelete={(e) => this.addFavorite(e, room.room_name)}\r\n                                                    deleteIcon={<FavoriteBorderIcon />}\r\n                                                />\r\n                                            </Box>\r\n                                        );\r\n                                    }\r\n                                })}\r\n                                <Box color=\"red\" padding=\"small\">\r\n                                    {errorMessage !== \"\" && <p>{errorMessage}</p>}\r\n                                </Box>\r\n                            </Box>\r\n                            <Row>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"solid\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        text=\"Предыдущая страница\"\r\n                                        onClick={this.previousPage}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"outline\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        text=\"Следующая страница\"\r\n                                        onClick={this.nextPage}\r\n                                    />\r\n                                </Box>\r\n                            </Row>\r\n                        </Box>\r\n                    </Stack>\r\n                </Box>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\nav\\Favorites.js",["84","85","86","87","88","89","90"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {get_rooms, post_room, favorites, get_favorites, get_favorite, get_room, post_favorite} from \"../../api/rooms\";\r\nimport {get_user_from_token} from \"../../api/auth\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport CancelRoundedIcon from \"@material-ui/icons/CancelRounded\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {Box, Button, defaultTheme, fontSizes, Row, Stack,} from \"luxor-component-library\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass Favorites extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPage: 1,\r\n            roomsPerPage: 10,\r\n            globalIndex: -1,\r\n            rooms: [],\r\n            currentUser: null,\r\n            room_id: null,\r\n            is_owner: false,\r\n            roomNav: false,\r\n            selected_room_name: \"\",\r\n        };\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onEnterHandler = this.onEnterHandler.bind(this);\r\n        this.nextPage = this.nextPage.bind(this);\r\n        this.previousPage = this.previousPage.bind(this);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.removeFavorite = this.removeFavorite.bind(this);\r\n\r\n        this.addFavorite = this.addFavorite.bind(this);\r\n    }\r\n\r\n    fetchRooms() {\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        instance\r\n            .get(get_favorites, { params: { page: this.state.currentPage, limit: this.state.roomsPerPage } })\r\n            .then((response) => {\r\n                this.setState({ rooms: response.data });\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"ERROR FETCHING ROOMS: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    nextPage(e){\r\n        console.log(this.state.currentPage);\r\n        this.state.currentPage++;\r\n        this.fetchRooms();\r\n        console.log(this.state.currentPage);\r\n    }\r\n\r\n    previousPage(e){\r\n        console.log(this.state.currentPage);\r\n        if (this.state.currentPage > 1){\r\n            this.state.currentPage--;\r\n            this.fetchRooms();\r\n        } else{\r\n            console.log(\"bad\");\r\n        }\r\n    }\r\n\r\n    handleFavoriteRequest(method, e, room_name) {\r\n        e.preventDefault();\r\n        let is_chosen = false;\r\n        if (method === 'add') {\r\n            is_chosen = true;\r\n        }\r\n        let body = {\r\n            \"room_name\": room_name,\r\n            \"is_chosen\": is_chosen\r\n        };\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .post(post_favorite, body)\r\n            .then((response) => {\r\n                const updatedRooms = this.state.rooms;\r\n                updatedRooms.forEach(room => {\r\n                    if (room.room_name === room_name) {\r\n                        room.is_favorites = method === 'add';\r\n                    }\r\n                });\r\n                this.setState({rooms: updatedRooms});\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n    handleClick(e, room_name, index) {\r\n        e.preventDefault();\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        // Создаем новый массив, исключая удаляемую комнату\r\n        const updatedRooms = this.state.rooms.filter(room => room.room_name !== room_name);\r\n\r\n        // Обновляем состояние новым массивом\r\n        this.setState({ rooms: updatedRooms });\r\n\r\n        instance.delete(get_room + \"/\" + room_name)\r\n            .then(() => {\r\n                console.log(\"Delete room\");\r\n                this.fetchRooms()\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching room:\", error);\r\n            });\r\n    }\r\n\r\n\r\n    addFavorite(e, room_name) {\r\n        this.handleFavoriteRequest('add', e, room_name);\r\n    }\r\n\r\n    removeFavorite(e, room_name) {\r\n        this.handleFavoriteRequest('remove', e, room_name);\r\n    }\r\n\r\n    onInputChange(event) {\r\n        //console.log(\"Input: \" + event.target.value);\r\n        this.setState({ selected_room_name: event.target.value });\r\n    }\r\n\r\n    onEnterHandler = (event) => {\r\n        // Number 13 is the \"Enter\" key on the keyboard\r\n        if (event.keyCode === 13) {\r\n            // Trigger the button element with a click\r\n\r\n            this.startNewRoomClick(event);\r\n        }\r\n    };\r\n\r\n    findRoomByName(e) {\r\n        const roomName = this.state.selected_room_name.trim();\r\n        if (roomName === \"\") {\r\n            console.log(\"Error: Room name cannot be empty\");\r\n            return;\r\n        }\r\n\r\n        if (roomName.includes(\" \")) {\r\n            console.log(\"Error: Room name cannot contain spaces\");\r\n            return;\r\n        }\r\n\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance.get(get_favorite + \"/\" + roomName, { params: { page: this.state.currentPage, limit: this.state.roomsPerPage } })\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                this.setState({ rooms: response.data });\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching room:\", error);\r\n            });\r\n    }\r\n\r\n    handleRoomClick(e) {\r\n        e.preventDefault();\r\n        let room_name = e.currentTarget.textContent;\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .get(get_room + \"/\" + room_name)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    //console.log(response.data);\r\n                    this.setState({ roomNav: response.data.room_name });\r\n                }\r\n                console.log(response.data);\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING SINGLE ROOM: \\n\" + err);\r\n            });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // Setup redux and snag the current user and bring them into state\r\n        // Fetch all rooms (need to setup credentials from current user)\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 1000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        instance\r\n            .get(get_user_from_token)\r\n            .then((response) => {\r\n                this.setState({\r\n                    currentUser: response.data.username,\r\n                    user: { ...response.data },\r\n                });\r\n                instance\r\n                    .get(get_favorites, { params: { page: this.state.currentPage, limit: this.state.roomsPerPage } })\r\n                    .then((response) => {\r\n                        this.setState({ rooms: response.data });\r\n                    })\r\n                    .catch((err) => {\r\n                        // clear token just in case\r\n                        localStorage.removeItem(\"token\");\r\n                        console.log(\"ERROR FETCHING ROOMS: \\n\" + err);\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.log(\"ERROR FETCHING CURRENT USER\\n\" + err);\r\n            });\r\n    }\r\n\r\n\r\n    render() {\r\n        const input_text_style = {\r\n            padding: \"10px\",\r\n            paddingLeft: \"25px\",\r\n            paddingRight: \"25px\",\r\n            width: \"400px\",\r\n            borderRadius: \"3em\",\r\n            outline: \"none\",\r\n            border: `2px solid ${defaultTheme.palette.error.main}`,\r\n            fontWeight: 400,\r\n            fontSize: fontSizes.medium,\r\n            fontFamily: defaultTheme.typography.primaryFontFamily,\r\n            color: defaultTheme.palette.grey[400],\r\n        };\r\n        const {rooms, roomNav, user} = this.state;\r\n        if (roomNav && roomNav !== \"None\") {\r\n            return <Redirect push to={\"/dashboard/\" + roomNav}/>;\r\n        } else {\r\n            return (\r\n                <Box\r\n                    padding=\"small\"\r\n                    paddingY=\"xlarge\"\r\n                    style={{\r\n                        height: \"100vh\",\r\n                    }}\r\n                    backgroundColor={defaultTheme.palette.grey[100]}\r\n                    color={defaultTheme.palette.common.black}\r\n                    textAlign=\"center\"\r\n                >\r\n                    <Stack\r\n                        space=\"large\"\r\n                        padding=\"medium\"\r\n                        roundedCorners\r\n                        marginX=\"xxxlarge\"\r\n                    >\r\n                        <Box padding=\"medium\">\r\n                            <h1>Избранные комнаты пользователя {this.state.currentUser}</h1>\r\n                        </Box>\r\n                        <Row\r\n                            space=\"none\"\r\n                            width=\"50%\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"center\"\r\n                            textAlign=\"center\"\r\n                            style={{margin: \"auto\"}}\r\n                        >\r\n                            <Box>\r\n                                <input\r\n                                    id=\"messageText\"\r\n                                    style={input_text_style}\r\n                                    value={this.state.selected_room_name}\r\n                                    onChange={this.onInputChange}\r\n                                    onKeyUp={(e) => this.onEnterHandler(e)}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Box>\r\n                            <Box>\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    size=\"medium\"\r\n                                    color=\"secondary\"\r\n                                    text=\"Поиск комнаты\"\r\n                                    onClick={(e) => this.findRoomByName(e)}\r\n                                />\r\n                            </Box>\r\n                        </Row>\r\n                        <Box>\r\n                            <h1>Список комнат</h1>\r\n                            <Stack space=\"medium\">\r\n                                {rooms.map((room, index) => {\r\n                                    if (room.is_favorites === true) {\r\n                                        if (room.is_owner === true){\r\n                                            return (\r\n                                                <Box margin=\"small\" key={room.id}>\r\n                                                    <Chip data-testid=\"chip-component\"\r\n                                                        style={{backgroundColor: room.is_owner ? \"orange\" : null}}\r\n                                                        icon={FavoriteIcon}\r\n                                                        onClick={(e) => this.handleRoomClick(e)}\r\n                                                        label={room.room_name}\r\n                                                        id={room.room_name}\r\n                                                        onDelete={(e) =>\r\n                                                            this.removeFavorite(e, room.room_name)\r\n                                                        }\r\n                                                        deleteIcon={<FavoriteIcon />}\r\n                                                    />\r\n                                                    <Chip\r\n                                                        label=\"Удалить\"\r\n                                                        style={{backgroundColor: room.is_owner ? \"orange\" : null}}\r\n                                                        variant=\"outlined\"\r\n                                                        id={room.room_name}\r\n                                                        onDelete={(e) =>\r\n                                                            this.handleClick(e, room.room_name, index)\r\n                                                        }\r\n                                                    />\r\n                                                </Box>\r\n                                            );\r\n                                        } else{\r\n                                            return (\r\n                                                <Box margin=\"small\" key={room.id}>\r\n                                                    <Chip\r\n                                                        style={{backgroundColor: room.is_owner ? \"orange\" : null}}\r\n                                                        icon={FavoriteIcon}\r\n                                                        onClick={(e) => this.handleRoomClick(e)}\r\n                                                        label={room.room_name}\r\n                                                        id={room.room_name}\r\n                                                        onDelete={(e) =>\r\n                                                            this.removeFavorite(e, room.room_name)\r\n                                                        }\r\n                                                        deleteIcon={<FavoriteIcon />}\r\n                                                    />\r\n                                                </Box>\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        return (\r\n                                            <Box margin=\"20px\" key={room.id}>\r\n                                                <Chip\r\n                                                    style={{backgroundColor: room.is_owner ? \"orange\" : null}}\r\n                                                    icon={FavoriteBorderIcon}\r\n                                                    onClick={(e) => this.handleRoomClick(e)}\r\n                                                    label={room.room_name}\r\n                                                    id={room.room_name}\r\n                                                    onDelete={(e) => this.addFavorite(e, room.room_name)}\r\n                                                    deleteIcon={<FavoriteBorderIcon />}\r\n                                                />\r\n                                            </Box>\r\n                                        );\r\n                                    }\r\n                                })}\r\n                            </Stack>\r\n                            <Row>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"solid\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        text=\"Предыдущая страница\"\r\n                                        onClick={this.previousPage}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button\r\n                                        variant=\"outline\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        text=\"Следующая страница\"\r\n                                        onClick={this.nextPage}\r\n                                    />\r\n                                </Box>\r\n                            </Row>\r\n                        </Box>\r\n                    </Stack>\r\n                </Box>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default Favorites;","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\auth\\Logout.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\pages\\chat\\VideoChatPage.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\auth.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\ChatModule.js",["91"],"import React from \"react\";\r\nimport { animateScroll } from \"react-scroll\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\nimport EmojiConverter from \"emoji-js\";\r\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\r\nimport VideoCallIcon from \"@material-ui/icons/VideoCall\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    Row,\r\n    Stack,\r\n    defaultTheme,\r\n    fontSizes,\r\n} from \"luxor-component-library\";\r\nimport { get_room, put_user_into_room } from \"../api/rooms\";\r\nimport { get_user_from_token } from \"../api/auth\";\r\nimport axios from \"axios\";\r\n\r\nvar jsemoji = new EmojiConverter();\r\njsemoji.replace_mode = \"unified\";\r\njsemoji.allow_native = true;\r\nvar client = null;\r\n\r\nfunction checkWebSocket(username, roomname) {\r\n    if (client === null || client.readyState === WebSocket.CLOSED) {\r\n        client = new WebSocket(\r\n            \"ws://localhost:8000/ws/\" + roomname + \"/\" + username\r\n        );\r\n    }\r\n    return client;\r\n}\r\n\r\nclass ChatModule extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.messagesEndRef = React.createRef();\r\n        this.state = {\r\n            room: {},\r\n            openVideoChat: false,\r\n            isLoaded: false,\r\n            openEmoji: false,\r\n            currentUser: this.props.user,\r\n            message_draft: \"\",\r\n            messages: [],\r\n            members: [],\r\n            membersCount: 0,\r\n            isButtonDisabled: true,\r\n            selectedMediaFile: null,\r\n        };\r\n        this.checkWebSocketConnection = this.checkWebSocketConnection.bind(this);\r\n        this.onClickHandler = this.onClickHandler.bind(this);\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onEnterHandler = this.onEnterHandler.bind(this);\r\n        this.onOpenEmoji = this.onOpenEmoji.bind(this);\r\n        this.onEmojiSelection = this.onEmojiSelection.bind(this);\r\n        this.onOpenVideoChat = this.onOpenVideoChat.bind(this);\r\n        this.onAttachFile = this.onAttachFile.bind(this);\r\n    }\r\n\r\n    onInputChange(event) {\r\n        const messageDraft = event.target.value;\r\n        if (messageDraft.length <= 4096) {\r\n            this.setState({\r\n                message_draft: messageDraft,\r\n                isButtonDisabled: !messageDraft.trim(),\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWebSocketConnection() {\r\n        if (client === null || client.readyState === WebSocket.CLOSED) {\r\n            client = new WebSocket(\r\n                \"ws://localhost:8000/ws/\" +\r\n                this.state.room_name +\r\n                \"/\" +\r\n                this.state.currentUser\r\n            );\r\n        }\r\n    }\r\n\r\n    sendMessageToChat = (message) => {\r\n        const messageObj = {\r\n            type: \"text\",\r\n            message: message,\r\n            user: { username: this.state.currentUser },\r\n            room_name: this.state.room_name,\r\n        };\r\n\r\n        const sendHelper = (client) => {\r\n            if (client !== null && client.readyState === WebSocket.OPEN) {\r\n                client.send(JSON.stringify(messageObj));\r\n            } else {\r\n                client = checkWebSocket(this.state.currentUser, this.state.room_name);\r\n                client.send(JSON.stringify(messageObj));\r\n            }\r\n        };\r\n\r\n        sendHelper(this.state.client);\r\n    };\r\n\r\n    onOpenVideoChat() {\r\n        const waitingMessage = \"Пользователь ожидает в видеочате. Пожалуйста, подключитесь!\";\r\n        this.sendMessageToChat(waitingMessage);\r\n        this.setState({ openVideoChat: true });\r\n    }\r\n\r\n    scrollToBottom() {\r\n        animateScroll.scrollToBottom({\r\n            containerId: \"message-list\",\r\n            duration: \"1ms\",\r\n        });\r\n    }\r\n\r\n    onOpenEmoji() {\r\n        let currentState = this.state.openEmoji;\r\n        this.setState({ openEmoji: !currentState });\r\n    }\r\n\r\n    onEmojiSelection(emoji_code, emoji_data) {\r\n        let e = emoji_data.emoji;\r\n        let _message =\r\n            this.state.message_draft === undefined ? \"\" : this.state.message_draft;\r\n        let updatedMessage = _message + e;\r\n\r\n        if (updatedMessage.length <= 4096) {\r\n            this.setState({\r\n                message_draft: updatedMessage,\r\n                isButtonDisabled: !updatedMessage.trim(),\r\n            });\r\n        } else {\r\n            console.warn(\"Превышен лимит символов после добавления смайлика.\");\r\n        }\r\n\r\n    }\r\n\r\n    checkImageSize(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                const width = img.width;\r\n                const height = img.height;\r\n\r\n                // Проверка на минимальное разрешение 100x100 пикселей\r\n                if (width < 100 || height < 100) {\r\n                    this.showError(\"Разрешение изображения должно быть не менее 100x100 пикселей.\");\r\n                    reject(\"Разрешение изображения должно быть не менее 100x100 пикселей.\");\r\n                }\r\n\r\n                // Проверка на максимальное разрешение 2048x2048 пикселей\r\n                if (width > 2048 || height > 2048) {\r\n                    this.showError(\"Разрешение изображения не должно превышать 2к пикселей\");\r\n                    reject(\"Разрешение изображения не должно превышать 2к пикселей\");\r\n                }\r\n\r\n                resolve();\r\n            };\r\n            img.onerror = () => {\r\n                this.showError(\"Ошибка при загрузки изображения.\");\r\n                reject(\"Ошибка при загрузки изображения.\");\r\n            };\r\n            img.src = URL.createObjectURL(file);\r\n        });\r\n    }\r\n\r\n    onAttachFile = async () => {\r\n        const fileInput = document.createElement(\"input\");\r\n        fileInput.type = \"file\";\r\n        fileInput.accept = \".jpg,.png,.jpeg,.webp,.gif,.mp4,.avi,.webm,.mp3,.wav\";\r\n        const maxAudioFileSize = 8 * 1024 * 1024; // 8 MB\r\n        const maxImageFileSize = 10 * 1024 * 1024; // 10 MB\r\n        const maxVideoFileSize = 50 * 1024 * 1024; // 50 MB\r\n\r\n        fileInput.addEventListener(\"change\", async (e) => {\r\n            const files = e.target.files;\r\n            const selectedFile = files[0];\r\n            if (selectedFile) {\r\n                try {\r\n                    const fileType = e.target.files[0].type;\r\n                    const fileSize = selectedFile.size;\r\n                    // Проверка на разрешенный MIME-тип\r\n                    const allowedMimeTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'video/mp4', 'video/avi', 'video/webm', 'audio/mp3', 'audio/wav', 'audio/mpeg'];\r\n                    if (!allowedMimeTypes.includes(fileType)) {\r\n                        this.showError('Неразрешенный тип файла.');\r\n                        console.log('Фактический MIME-тип файла:', fileType);\r\n                        return;\r\n                    }\r\n\r\n                    if (selectedFile.type.startsWith('audio/') && fileSize > maxAudioFileSize) {\r\n                        this.showError('Размер аудиофайла превышает максимально допустимый размер (8 MB).');\r\n                        return;\r\n                    }\r\n\r\n                    if (selectedFile.type.startsWith('video/') && fileSize > maxVideoFileSize) {\r\n                        this.showError('Размер видео превышает максимально допустимый размер (50 MB).');\r\n                        return;\r\n                    }\r\n\r\n                    if (selectedFile.type.startsWith('image/') && fileSize > maxImageFileSize) {\r\n                        this.showError('Размер изображения превышает максимально допустимый размер (10 MB).');\r\n                        return;\r\n                    }\r\n\r\n                    if (selectedFile.type.startsWith(\"image/\")) {\r\n                        await this.checkImageSize(selectedFile);\r\n                    }\r\n\r\n                    if (selectedFile.type.startsWith(\"video/\")) {\r\n                        this.isVideoFormatAllowed(selectedFile).then((isAllowed) => {\r\n                            if (!isAllowed) {\r\n                                this.showError(\"Данный формат видео не поддерживается\");\r\n                            }\r\n                            else{\r\n                                this.setState({ selectedMediaFile: selectedFile, isButtonDisabled: false });\r\n                            }\r\n                        });\r\n                    }\r\n                    else{\r\n                        this.setState({ selectedMediaFile: selectedFile, isButtonDisabled: false });\r\n                    }\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        });\r\n\r\n        fileInput.click();\r\n    }\r\n\r\n    showError(message) {\r\n        alert('Ошибка: ' + message);\r\n    }\r\n\r\n    isVideoFormatAllowed(file) {\r\n        const allowedFormats = [\"1:1\", \"4:3\", \"16:9\", \"16:10\"];\r\n\r\n        return new Promise((resolve) => {\r\n            const video = document.createElement(\"video\");\r\n            video.src = URL.createObjectURL(file);\r\n\r\n            video.onloadedmetadata = () => {\r\n                const width = video.videoWidth;\r\n                const height = video.videoHeight;\r\n\r\n                // Рассчитываем соотношение сторон\r\n                const aspectRatio = width / height;\r\n\r\n                // Проверяем, разрешено ли соотношение сторон\r\n                const isAllowed = allowedFormats.some((format) => {\r\n                    const [allowedWidth, allowedHeight] = format.split(\":\").map(Number);\r\n                    return Math.abs((width / height) - (allowedWidth / allowedHeight)) < 0.01;\r\n                });\r\n\r\n                resolve(isAllowed);\r\n            };\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem(\"token\");\r\n        const instance = axios.create({\r\n            timeout: 10000,\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        // Fetch user info and instantiates websocket\r\n        instance\r\n            .get(get_user_from_token)\r\n            .then((res) => {\r\n                this.setState({\r\n                    currentUser: res.data.username,\r\n                    user: res.data,\r\n                });\r\n                instance\r\n                    .put(\r\n                        put_user_into_room + \"/\" + decodeURIComponent(this.props.room_name)\r\n                    )\r\n                    .then(() => {\r\n                        instance\r\n                            .get(get_room + \"/\" + decodeURIComponent(this.props.room_name))\r\n                            .then((response) => {\r\n                                this.setState({\r\n                                    ...response.data,\r\n                                    members: response.data.members,\r\n                                    isLoaded: true,\r\n                                    membersCount: response.data.members.length,\r\n                                }, () => {\r\n                                    this.scrollToBottom();\r\n                                });\r\n                                console.log(\"Connecting Websocket\");\r\n                                client = checkWebSocket(\r\n                                    res.data.username,\r\n                                    response.data.room_name\r\n                                );\r\n                                client.onopen = () => {\r\n                                    this.setState({ isLoaded: true }, this.scrollToBottom);\r\n                                    console.log(\"WebSocket Client Connected\");\r\n                                };\r\n                                client.onclose = () => {\r\n                                    console.log(\"Websocket Disconnected\");\r\n                                    client.close();\r\n                                };\r\n                                client.onerror = (err) => {\r\n                                    console.error(\r\n                                        \"Socket encountered error: \",\r\n                                        err.message,\r\n                                        \"Closing socket\"\r\n                                    );\r\n                                    client.close();\r\n                                };\r\n                                client.onmessage = (event) => {\r\n                                    let message = JSON.parse(event.data);\r\n                                    if (\r\n                                        message.hasOwnProperty(\"type\") &&\r\n                                        (message.type === \"dismissal\" ||\r\n                                            message.type === \"entrance\")\r\n                                    ) {\r\n                                        if (message.hasOwnProperty(\"new_room_obj\") && Array.isArray(message.new_room_obj)) {\r\n                                            console.log(...message.new_room_obj);\r\n                                            this.setState({\r\n                                                ...message.new_room_obj,\r\n                                            });\r\n                                        } else {\r\n                                            console.error(\"Invalid or non-iterable new_room_obj in the message\");\r\n                                        }\r\n                                    } else {\r\n                                        let message_body = {\r\n                                            message: message[\"message\"],\r\n                                            media_file_url: message[\"media_file_url\"],\r\n                                            user: message[\"user\"],\r\n                                        };\r\n                                        let messages_arr = this.state.messages;\r\n                                        messages_arr.push(message_body);\r\n                                        this.setState(\r\n                                            { messages: messages_arr },\r\n                                            this.scrollToBottom\r\n                                        );\r\n                                        console.log(this.state.messages);\r\n                                    }\r\n                                };\r\n                            })\r\n                            .catch((err) => {\r\n                                localStorage.removeItem(\"token\");\r\n                                console.error(\"ERROR FETCHING ROOM\\n\" + err);\r\n                            });\r\n                    })\r\n                    .catch((err) => {\r\n                        console.error(\"Error adding user to room\\n\" + err);\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                localStorage.removeItem(\"token\");\r\n                console.error(\"ERROR FETCHING CURRENT USER\\n\" + err);\r\n            });\r\n    }\r\n\r\n    onEnterHandler = (event) => {\r\n        // Number 13 is the \"Enter\" key on the keyboard\r\n        if (event.keyCode === 13) {\r\n            // Trigger the button element with a click\r\n            event.preventDefault();\r\n            this.onClickHandler(event);\r\n        }\r\n    };\r\n\r\n    onClickHandler(event) {\r\n        event.preventDefault();\r\n        const input = this.state.message_draft;\r\n\r\n        if (input.trim().length > 0 || this.state.selectedMediaFile) {\r\n            if (this.state.selectedMediaFile) {\r\n                this.handleMediaFile(input);\r\n            } else {\r\n                const messageObj = {\r\n                    message: input,\r\n                    user: { username: this.state.currentUser },\r\n                    room_name: this.state.room_name,\r\n                };\r\n\r\n                client = checkWebSocket(this.state.currentUser, this.state.room_name);\r\n                if (client.readyState === WebSocket.OPEN) {\r\n                    client.send(JSON.stringify(messageObj));\r\n                    this.setState({ message_draft: \"\", isButtonDisabled: true, selectedMediaFile: null }, this.scrollToBottom);\r\n                } else {\r\n                    console.log(\"WebSocket is still connecting. Message not sent.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMediaFile(message) {\r\n        const selectedFile = this.state.selectedMediaFile;\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (event) => {\r\n            const base64Data = event.target.result.split(',')[1];\r\n            const messageObj = {\r\n                type: \"file\",\r\n                content: base64Data,\r\n                message: message,\r\n                fileType: selectedFile.type,\r\n                user: { username: this.state.currentUser },\r\n                room_name: this.state.room_name,\r\n            };\r\n\r\n            if (client !== null && client.readyState === WebSocket.OPEN) {\r\n                client.send(JSON.stringify(messageObj));\r\n                this.setState({ message_draft: \"\", isButtonDisabled: true, selectedMediaFile: null }, this.scrollToBottom);\r\n            } else {\r\n                client = checkWebSocket(this.state.currentUser, this.state.room_name);\r\n                client.send(JSON.stringify(messageObj));\r\n                this.setState({ message_draft: \"\", isButtonDisabled: true, selectedMediaFile: null }, this.scrollToBottom);\r\n            }\r\n        };\r\n\r\n        reader.readAsDataURL(selectedFile);\r\n    }\r\n\r\n    render() {\r\n        const input_text_style = {\r\n            padding: \"10px\",\r\n            paddingLeft: \"25px\",\r\n            paddingRight: \"25px\",\r\n            width: \"600px\",\r\n            borderRadius: \"3em\",\r\n            outline: \"none\",\r\n            border: `2px solid ${defaultTheme.palette.error.main}`,\r\n            fontWeight: 400,\r\n            fontSize: fontSizes.medium,\r\n            fontFamily: defaultTheme.typography.primaryFontFamily,\r\n            color: defaultTheme.palette.grey[400],\r\n        };\r\n        const {\r\n            isLoaded,\r\n            messages,\r\n            members,\r\n            openVideoChat,\r\n            room_name,\r\n        } = this.state;\r\n        if (!isLoaded) {\r\n            return (\r\n                <Box\r\n                    margin=\"xlarge\"\r\n                    padding=\"large\"\r\n                    width=\"600px\"\r\n                    height=\"600px\"\r\n                    roundedCorners\r\n                    backgroundColor={defaultTheme.palette.secondary.light}\r\n                >\r\n                    <h1>Loading...</h1>\r\n                </Box>\r\n            );\r\n        } else if (openVideoChat) {\r\n            return <Redirect push to={\"/video/\" + room_name} />;\r\n        } else {\r\n            return (\r\n                <Row width=\"100%\">\r\n                    <Stack width=\"800px\">\r\n                        <Box\r\n                            padding=\"medium\"\r\n                            roundedCorners\r\n                            style={{\r\n                                overflow: \"scroll\",\r\n                                height: \"600px\",\r\n                                width: \"800px\",\r\n                            }}\r\n                            id=\"message-list\"\r\n                        >\r\n                            <Stack space=\"medium\" width=\"800px\">\r\n                                {messages.map((message, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                flexDirection: message.user.username === this.state.currentUser ? \"row\" : \"row-reverse\",\r\n                                                justifyContent: message.user.username === this.state.currentUser ? \"flex-end\" : \"flex-start\",\r\n                                            }}\r\n                                            key={index}\r\n                                        >\r\n                                            {message.media_file_url ? (\r\n                                                message.media_file_url.endsWith(\".mp4\") ? (\r\n                                                    <div>\r\n                                                        <video controls style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}>\r\n                                                            <source src={message.media_file_url} type=\"video/mp4\" />\r\n                                                            Your browser does not support the video tag.\r\n                                                        </video>\r\n                                                    </div>\r\n                                                ) : message.media_file_url.endsWith(\".mp3\") ? (\r\n                                                    <div>\r\n                                                        <audio controls>\r\n                                                            <source src={message.media_file_url} type=\"audio/mpeg\" />\r\n                                                            Your browser does not support the audio tag.\r\n                                                        </audio>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div>\r\n                                                        <img src={message.media_file_url} alt=\"uploaded file\" style={{ maxWidth: \"250px\", maxHeight: \"250px\" }} />\r\n                                                    </div>\r\n                                                )\r\n                                            ) : null}\r\n                                            {message.message.trim() !== '' && (\r\n                                                <Box\r\n                                                    marginX=\"large\"\r\n                                                    padding=\"small\"\r\n                                                    backgroundColor={\r\n                                                        message.user.username === this.state.currentUser\r\n                                                            ? defaultTheme.palette.error.main\r\n                                                            : defaultTheme.palette.primary.main\r\n                                                    }\r\n                                                    color={defaultTheme.palette.common.white}\r\n                                                    roundedCorners\r\n                                                    marginBottom=\"small\"\r\n                                                    style={{\r\n                                                        float:\r\n                                                            message.user.username === this.state.currentUser\r\n                                                                ? \"right\"\r\n                                                                : \"left\",\r\n                                                        maxWidth: \"80%\",\r\n                                                        wordWrap: \"break-word\",\r\n                                                    }}\r\n                                                    textAlign={\r\n                                                        message.user.username === this.state.currentUser\r\n                                                            ? \"right\"\r\n                                                            : \"left\"\r\n                                                    }\r\n                                                >\r\n                                                    {message.message}\r\n                                                </Box>\r\n                                            )}\r\n                                            <Box\r\n                                                padding=\"small\"\r\n                                                style={{\r\n                                                    float:\r\n                                                        message.user.username === this.state.currentUser\r\n                                                            ? \"right\"\r\n                                                            : \"left\",\r\n                                                }}\r\n                                                textAlign={\r\n                                                    message.user.username === this.state.currentUser\r\n                                                        ? \"right\"\r\n                                                        : \"left\"\r\n                                                }\r\n                                            >\r\n                                                {message.user.username}\r\n                                            </Box>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n\r\n                            </Stack>\r\n                        </Box>\r\n                        <Row width=\"800px\" padding=\"medium\" space=\"small\">\r\n                            <Box padding=\"small\">\r\n                                <input\r\n                                    data-testid=\"messageText\"\r\n                                    id=\"messageText\"\r\n                                    style={input_text_style}\r\n                                    value={this.state.message_draft}\r\n                                    onChange={this.onInputChange}\r\n                                    onFocus={this.checkWebSocketConnection}\r\n                                    onKeyUp={(e) => this.onEnterHandler(e)}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Box>\r\n                            <Row\r\n                                paddingY=\"small\"\r\n                                width=\"400px\"\r\n                                style={{position: \"relative\"}}\r\n                            >\r\n                                <Box\r\n                                    style={{\r\n                                        display: this.state.openEmoji ? \"block\" : \"none\",\r\n                                        position: \"absolute\",\r\n                                        bottom: \"0\",\r\n                                        left: \"0\",\r\n                                        marginBottom: \"70px\",\r\n                                    }}\r\n                                >\r\n                                    <EmojiPicker\r\n                                        preload\r\n                                        disableDiversityPicker\r\n                                        onEmojiClick={this.onEmojiSelection}\r\n                                    />\r\n                                </Box>\r\n                                <div style={{display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\"}}>\r\n                                    {this.state.selectedMediaFile && (\r\n                                        <div style={{marginRight: \"5px\"}}>\r\n                                            {this.state.selectedMediaFile.name}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    color=\"error\"\r\n                                    size=\"small\"\r\n                                    style={{\r\n                                        marginRight: \"10px\",\r\n                                        border: `2px solid ${defaultTheme.palette.error.main}`,\r\n                                    }}\r\n                                    onClick={this.onAttachFile}\r\n                                    text={<AttachFileIcon/>}\r\n                                />\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    color=\"error\"\r\n                                    size=\"small\"\r\n                                    style={{\r\n                                        marginRight: \"10px\",\r\n                                        border: `2px solid ${defaultTheme.palette.error.main}`,\r\n                                    }}\r\n                                    onClick={this.onOpenEmoji}\r\n                                    text={<SentimentVerySatisfiedIcon/>}\r\n                                />\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    color=\"error\"\r\n                                    size=\"small\"\r\n                                    style={{\r\n                                        marginRight: \"10px\",\r\n                                        border: `2px solid ${defaultTheme.palette.error.main}`,\r\n                                    }}\r\n                                    onClick={this.onOpenVideoChat}\r\n                                    text={<VideoCallIcon/>}\r\n                                />\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    color=\"primary\"\r\n                                    size=\"medium\"\r\n                                    text=\"Send\"\r\n                                    onClick={this.onClickHandler}\r\n                                    disabled={this.state.isButtonDisabled}\r\n                                />\r\n                            </Row>\r\n                        </Row>\r\n                    </Stack>\r\n                    <Box\r\n                        padding=\"medium\"\r\n                        roundedCorners\r\n                        style={{\r\n                            overflow: \"scroll\",\r\n                            height: \"600px\",\r\n                            width: \"800px\",\r\n                        }}\r\n                    >\r\n                        <Stack space=\"small\">\r\n                            <Box padding=\"small\" color={defaultTheme.palette.common.black}>\r\n                                Number of members ({this.state.membersCount})\r\n                            </Box>\r\n                            <Box>\r\n                                <h1>Room Members</h1>\r\n                            </Box>\r\n                            {members.map((member, index) => {\r\n                                return (\r\n                                    <Box\r\n                                        padding=\"small\"\r\n                                        color={defaultTheme.palette.common.black}\r\n                                        marginBottom=\"small\"\r\n                                        textAlign=\"center\"\r\n                                        key={index}\r\n                                        roundedCorners\r\n                                    >\r\n                                        <Chip\r\n                                            avatar={<Avatar alt=\"Natacha\" src={member.image_url ? member.image_url : 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Anonymous.svg/1481px-Anonymous.svg.png'} />}\r\n                                            label={member.username}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Box>\r\n                                );\r\n                            })}\r\n                        </Stack>\r\n                    </Box>\r\n                </Row>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ChatModule;\r\nexport {ChatModule};","C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\api\\rooms.js",[],"C:\\Users\\79282\\WebstormProjects\\P2P-Messenger-frontend\\src\\components\\VideoChatModule.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":3,"column":37,"nodeType":"98","messageId":"99","endLine":3,"endColumn":43},{"ruleId":"100","severity":1,"message":"101","line":63,"column":59,"nodeType":"102","messageId":"103","endLine":63,"endColumn":60,"suggestions":"104"},{"ruleId":"96","severity":1,"message":"105","line":2,"column":36,"nodeType":"98","messageId":"99","endLine":2,"endColumn":45},{"ruleId":"100","severity":1,"message":"101","line":117,"column":51,"nodeType":"102","messageId":"103","endLine":117,"endColumn":52,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":83,"column":9,"nodeType":"109","messageId":"110","endLine":83,"endColumn":19},{"ruleId":"107","severity":1,"message":"108","line":91,"column":13,"nodeType":"109","messageId":"110","endLine":91,"endColumn":23},{"ruleId":"96","severity":1,"message":"111","line":3,"column":9,"nodeType":"98","messageId":"99","endLine":3,"endColumn":18},{"ruleId":"96","severity":1,"message":"112","line":3,"column":20,"nodeType":"98","messageId":"99","endLine":3,"endColumn":29},{"ruleId":"96","severity":1,"message":"113","line":3,"column":31,"nodeType":"98","messageId":"99","endLine":3,"endColumn":40},{"ruleId":"96","severity":1,"message":"114","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":59,"column":9,"nodeType":"109","messageId":"110","endLine":59,"endColumn":19},{"ruleId":"107","severity":1,"message":"108","line":67,"column":13,"nodeType":"109","messageId":"110","endLine":67,"endColumn":23},{"ruleId":"96","severity":1,"message":"115","line":270,"column":32,"nodeType":"98","messageId":"99","endLine":270,"endColumn":36},{"ruleId":"96","severity":1,"message":"116","line":250,"column":23,"nodeType":"98","messageId":"99","endLine":250,"endColumn":34},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["119","120"],"'fontSizes' is defined but never used.",["121","122"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'get_rooms' is defined but never used.","'post_room' is defined but never used.","'favorites' is defined but never used.","'CancelRoundedIcon' is defined but never used.","'user' is assigned a value but never used.","'aspectRatio' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"123","fix":"124","desc":"125"},{"messageId":"126","fix":"127","desc":"128"},{"messageId":"123","fix":"129","desc":"125"},{"messageId":"126","fix":"130","desc":"128"},"removeEscape",{"range":"131","text":"132"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"133","text":"134"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"135","text":"132"},{"range":"136","text":"134"},[2121,2122],"",[2121,2121],"\\",[3514,3515],[3514,3514]]